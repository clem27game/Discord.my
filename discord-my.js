const { Client, GatewayIntentBits, EmbedBuilder, PermissionsBitField, ChannelType, ActivityType } = require('discord.js');
const fs = require('fs');
const path = require('path');

class DiscordMyBot {
    constructor() {
        this.client = null;
        this.prefix = '!';
        this.commands = new Map();
        this.variables = new Map();
        this.errorMessages = new Map();
        this.token = null;
        this.isConnected = false;
        this.currentCommand = null;
    }

    // Fonction pour g√©rer les erreurs personnalis√©es
    handleError(errorType, customMessage = null) {
        const defaultMessage = this.errorMessages.get(errorType) || 'Une erreur est survenue.';
        console.error(`‚ùå ${customMessage || defaultMessage}`);
    }

    // Parser pour extraire les arguments d'une fonction Maya
    parseArguments(line) {
        const start = line.indexOf('(');
        const end = line.lastIndexOf(')');
        if (start === -1 || end === -1) return [];

        const argsStr = line.substring(start + 1, end).trim();
        if (!argsStr) return [];

        // Parser simple pour les arguments s√©par√©s par des virgules
        const args = [];
        let current = '';
        let inQuotes = false;
        let quoteChar = '';

        for (let i = 0; i < argsStr.length; i++) {
            const char = argsStr[i];

            if ((char === '"' || char === "'") && !inQuotes) {
                inQuotes = true;
                quoteChar = char;
            } else if (char === quoteChar && inQuotes) {
                inQuotes = false;
                quoteChar = '';
            } else if (char === ',' && !inQuotes) {
                args.push(current.trim().replace(/^['"]|['"]$/g, ''));
                current = '';
                continue;
            }

            current += char;
        }

        if (current.trim()) {
            args.push(current.trim().replace(/^['"]|['"]$/g, ''));
        }

        return args;
    }

    // Interpr√©ter une ligne de code Discord.my
    async interpretLine(line, message = null, commandContext = null) {
        line = line.trim();
        if (!line || line.startsWith('//')) return;

        try {
            // my.discord.connect - Connexion du bot
            if (line.startsWith('my.discord.connect')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    this.token = args[0];
                    await this.connectBot();
                }
            }

            // my.discord.prefix - D√©finir le pr√©fixe
            else if (line.startsWith('my.discord.prefix')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    this.prefix = args[0];
                    console.log(`üîß Pr√©fixe d√©fini: ${this.prefix}`);
                }
            }

            // my.discord.status - D√©finir le statut
            else if (line.startsWith('my.discord.status')) {
                const args = this.parseArguments(line);
                if (args.length >= 2) {
                    await this.setStatus(args[0], args[1], args[2] || null);
                }
            }

            // my.discord.command - Cr√©er une commande
            else if (line.startsWith('my.discord.command')) {
                const args = this.parseArguments(line);
                if (args.length >= 2) {
                    this.createCommand(args[0], args[1], args.slice(2));
                    this.currentCommand = args[0]; // Stocker la commande actuelle
                }
            }

            // my.discord.embed - Cr√©er un embed (associ√© √† la derni√®re commande cr√©√©e)
            else if (line.startsWith('my.discord.embed')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker l'embed dans la commande
                    this.commands.get(this.currentCommand).embed = args;
                } else if (message) {
                    // Ex√©cution directe si on a un message
                    await this.sendEmbed(message, args);
                }
            }

            // my.discord.send - Envoyer un message
            else if (line.startsWith('my.discord.send') && message) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    await message.reply(args[0]);
                }
            }

            // my.discord.error - D√©finir un message d'erreur personnalis√©
            else if (line.startsWith('my.discord.error')) {
                const args = this.parseArguments(line);
                if (args.length >= 2) {
                    this.errorMessages.set(args[0], args[1]);
                }
            }

            // my.variable - Cr√©er une variable
            else if (line.startsWith('my.variable')) {
                const parts = line.split('=');
                if (parts.length === 2) {
                    const varName = parts[0].replace('my.variable', '').trim();
                    const varValue = parts[1].trim().replace(/^['"]|['"]$/g, '');
                    this.variables.set(varName, varValue);
                }
            }

            // my.random.number - G√©n√©rer un nombre al√©atoire
            else if (line.startsWith('my.random.number')) {
                const args = this.parseArguments(line);
                const min = parseInt(args[0]) || 1;
                const max = parseInt(args[1]) || 100;
                const randomNum = Math.floor(Math.random() * (max - min + 1)) + min;
                this.variables.set('random', randomNum.toString());

                // Si on est dans le contexte d'une commande, stocker l'action
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(`üé≤ Nombre al√©atoire: ${randomNum}`);
                }
                return randomNum;
            }

            // my.random.image - G√©n√©rer une image al√©atoire
            else if (line.startsWith('my.random.image')) {
                const args = this.parseArguments(line);
                const category = args[0] || 'cats';
                const imageUrl = await this.getRandomImage(category);
                this.variables.set('random_image', imageUrl);

                // Si on est dans le contexte d'une commande, stocker l'action
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    const embed = new EmbedBuilder()
                        .setTitle(`üñºÔ∏è Image al√©atoire: ${category}`)
                        .setImage(imageUrl)
                        .setColor('#ff6b6b');
                    await message.reply({ embeds: [embed] });
                }
                return imageUrl;
            }

            // my.random.choice - Choix al√©atoire
            else if (line.startsWith('my.random.choice')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    const randomChoice = args[Math.floor(Math.random() * args.length)];
                    this.variables.set('random_choice', randomChoice);

                    // Si on est dans le contexte d'une commande, stocker l'action
                    if (this.currentCommand && this.commands.has(this.currentCommand)) {
                        this.commands.get(this.currentCommand).actions.push(line);
                    } else if (message) {
                        await message.reply(`üéØ Choix al√©atoire: **${randomChoice}**`);
                    }
                    return randomChoice;
                }
            }

            // my.discord.kick - Kick un membre
            else if (line.startsWith('my.discord.kick')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de kick dans la commande
                    this.commands.get(this.currentCommand).kickParams = {
                        target: args[0] || 'args[0]',
                        reason: args[1] || 'Aucune raison sp√©cifi√©e'
                    };
                } else if (message) {
                    await this.kickMember(message, args[0], args[1]);
                }
            }

            // my.discord.ban - Ban un membre
            else if (line.startsWith('my.discord.ban')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de ban dans la commande
                    this.commands.get(this.currentCommand).banParams = {
                        target: args[0] || 'args[0]',
                        reason: args[1] || 'Aucune raison sp√©cifi√©e'
                    };
                } else if (message) {
                    await this.banMember(message, args[0], args[1]);
                }
            }

            // my.console - Afficher dans la console
            else if (line.startsWith('my.console')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    console.log(`üí¨ ${args[0]}`);
                }
            }

            // my.discord.dm - Envoyer un message priv√©
            else if (line.startsWith('my.discord.dm')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de DM dans la commande
                    this.commands.get(this.currentCommand).dmParams = {
                        target: args[0] || 'args[0]',
                        message: args[1] || 'Message par d√©faut'
                    };
                } else if (message && args.length >= 2) {
                    await this.sendDM(message, args[0], args[1]);
                }
            }

            // my.discord.role - G√©rer les r√¥les
            else if (line.startsWith('my.discord.role')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de r√¥le dans la commande
                    this.commands.get(this.currentCommand).roleParams = {
                        action: args[0] || 'add',
                        target: args[1] || 'args[0]',
                        role: args[2] || 'Membre'
                    };
                } else if (message && args.length >= 3) {
                    await this.manageRole(message, args[1], args[0], args[2]);
                }
            }

            // my.discord.channel - G√©rer les canaux
            else if (line.startsWith('my.discord.channel') && message) {
                const args = this.parseArguments(line);
                if (args.length >= 2) {
                    await this.manageChannel(message, args[0], args[1], args[2]);
                }
            }

            // my.discord.poll - Cr√©er un sondage
            else if (line.startsWith('my.discord.poll')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de sondage dans la commande
                    this.commands.get(this.currentCommand).pollParams = {
                        question: args[0] || 'Sondage',
                        options: args.slice(1)
                    };
                } else if (message && args.length >= 2) {
                    await this.createPoll(message, args[0], args.slice(1));
                }
            }

            // my.discord.react - Ajouter une r√©action (corriger le nom)
            else if (line.startsWith('my.discord.react')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de r√©action dans la commande
                    this.commands.get(this.currentCommand).reactionParams = {
                        emojis: args.length > 0 ? args : ['üëç']
                    };
                } else if (message && args.length > 0) {
                    for (const emoji of args) {
                        try {
                            await message.react(emoji);
                        } catch (error) {
                            console.error(`Erreur lors de l'ajout de la r√©action ${emoji}:`, error);
                        }
                    }
                }
            }

            // my.discord.server.info - Informations du serveur
            else if (line.startsWith('my.discord.server.info') && message) {
                await this.getServerInfo(message);
            }

            // my.discord.user.info - Informations de l'utilisateur
            else if (line.startsWith('my.discord.user.info') && message) {
                const args = this.parseArguments(line);
                await this.getUserInfo(message, args[0]);
            }

            // my.discord.mute - Mute un membre
            else if (line.startsWith('my.discord.mute') && message) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).muteParams = {
                        target: args[0],
                        duration: args[1] || '10m',
                        reason: args[2] || 'Aucune raison sp√©cifi√©e'
                    };
                } else {
                    await this.muteMember(message, args[0], args[1], args[2]);
                }
            }

            // my.discord.purge - Supprimer des messages
            else if (line.startsWith('my.discord.purge') && message) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).purgeParams = {
                        amount: args[0] || '10'
                    };
                } else {
                    await this.purgeMessages(message, args[0]);
                }
            }

            // my.discord.avatar - Obtenir l'avatar d'un utilisateur
            else if (line.startsWith('my.discord.avatar') && message) {
                const args = this.parseArguments(line);
                await this.getUserAvatar(message, args[0]);
            }

            // my.math.calculate - Calculatrice
            else if (line.startsWith('my.math.calculate')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    const result = this.calculateMath(args[0]);
                    this.variables.set('math_result', result.toString());

                    // Si on est dans le contexte d'une commande, stocker l'action
                    if (this.currentCommand && this.commands.has(this.currentCommand)) {
                        this.commands.get(this.currentCommand).actions.push(line);
                    } else if (message) {
                        await message.reply(`üßÆ R√©sultat: ${args[0]} = **${result}**`);
                    }
                    return result;
                }
            }

            // my.time.format - Obtenir l'heure format√©e
            else if (line.startsWith('my.time.format')) {
                const args = this.parseArguments(line);
                const format = args[0] || 'full';
                const time = this.getFormattedTime(format);
                this.variables.set('current_time', time);

                // Si on est dans le contexte d'une commande, stocker l'action
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(`‚è∞ Heure actuelle: ${time}`);
                }
                return time;
            }

            // my.discord.stats - Statistiques du bot
            else if (line.startsWith('my.discord.stats') && message) {
                await this.getBotStats(message);
            }

            // === NOUVELLES FONCTIONNALIT√âS V2.0 ===

            // my.qr.generate - G√©n√©rateur de QR Code
            else if (line.startsWith('my.qr.generate')) {
                const args = this.parseArguments(line);
                this.variables.set('qr_url', `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(args[0] || 'Discord.my')}`);
            }

            // my.random.quote - Citation al√©atoire
            else if (line.startsWith('my.random.quote')) {
                const quotes = [
                    "La cr√©ativit√©, c'est l'intelligence qui s'amuse. - Albert Einstein",
                    "Le succ√®s c'est d'aller d'√©chec en √©chec sans perdre son enthousiasme. - Winston Churchill",
                    "L'imagination est plus importante que le savoir. - Albert Einstein",
                    "Le meilleur moment pour planter un arbre c'√©tait il y a 20 ans. Le deuxi√®me meilleur moment c'est maintenant. - Proverbe chinois",
                    "Soyez vous-m√™me, tous les autres sont d√©j√† pris. - Oscar Wilde"
                ];
                this.variables.set('random_quote', quotes[Math.floor(Math.random() * quotes.length)]);
            }

            // my.random.joke - Blague al√©atoire
            else if (line.startsWith('my.random.joke')) {
                const jokes = [
                    "Pourquoi les plongeurs plongent-ils toujours en arri√®re et jamais en avant ? Parce que sinon, ils tombent dans le bateau !",
                    "Que dit un escargot quand il croise une limace ? \"Regarde le nudiste !\"",
                    "Qu'est-ce qui est jaune et qui attend ? Jonathan !",
                    "Comment appelle-t-on un chat tomb√© dans un pot de peinture le jour de No√´l ? Un chat-mallow !",
                    "Pourquoi les poissons n'aiment pas jouer au tennis ? Parce qu'ils ont peur du filet !"
                ];
                this.variables.set('random_joke', jokes[Math.floor(Math.random() * jokes.length)]);
            }

            // my.random.fact - Fait amusant
            else if (line.startsWith('my.random.fact')) {
                const facts = [
                    "Les pieuvres ont trois c≈ìurs et du sang bleu !",
                    "Un groupe de flamants roses s'appelle une \"flamboyance\" !",
                    "Les abeilles peuvent reconna√Ætre les visages humains !",
                    "Le miel ne se p√©rime jamais !",
                    "Les dauphins ont des noms pour s'identifier entre eux !"
                ];
                this.variables.set('random_fact', facts[Math.floor(Math.random() * facts.length)]);
            }

            // my.horoscope - Horoscope
            else if (line.startsWith('my.horoscope')) {
                const args = this.parseArguments(line);
                const predictions = [
                    "Les astres vous sourient aujourd'hui !",
                    "Une belle surprise vous attend !",
                    "Jour id√©al pour de nouveaux projets !",
                    "L'amour est dans l'air !",
                    "Votre cr√©ativit√© sera r√©compens√©e !"
                ];
                this.variables.set('horoscope', predictions[Math.floor(Math.random() * predictions.length)]);
            }

            // my.game.coinflip - Pile ou face
            else if (line.startsWith('my.game.coinflip')) {
                this.variables.set('coinflip', Math.random() < 0.5 ? 'ü™ô Face' : 'ü™ô Pile');
            }

            // my.game.rps - Pierre papier ciseaux
            else if (line.startsWith('my.game.rps')) {
                const args = this.parseArguments(line);
                const choices = ['pierre', 'papier', 'ciseaux'];
                const botChoice = choices[Math.floor(Math.random() * choices.length)];
                const userChoice = args[0]?.toLowerCase();

                let result = '';
                if (userChoice === botChoice) {
                    result = `√âgalit√© ! Nous avons tous les deux choisi ${botChoice} !`;
                } else if (
                    (userChoice === 'pierre' && botChoice === 'ciseaux') ||
                    (userChoice === 'papier' && botChoice === 'pierre') ||
                    (userChoice === 'ciseaux' && botChoice === 'papier')
                ) {
                    result = `Vous gagnez ! ${userChoice} bat ${botChoice} !`;
                } else {
                    result = `Je gagne ! ${botChoice} bat ${userChoice} !`;
                }
                this.variables.set('rps_result', result);
            }

            // my.game.8ball - Boule magique
            else if (line.startsWith('my.game.8ball')) {
                const answers = [
                    "üé± C'est certain !",
                    "üé± Sans aucun doute !",
                    "üé± Oui d√©finitivement !",
                    "üé± Vous pouvez compter dessus !",
                    "üé± Tr√®s probable !",
                    "üé± Les signes pointent vers oui !",
                    "üé± R√©ponse floue, r√©essayez !",
                    "üé± Demandez plus tard !",
                    "üé± Mieux vaut ne pas vous le dire maintenant !",
                    "üé± Peu probable !",
                    "üé± Mes sources disent non !",
                    "üé± Tr√®s douteux !"
                ];
                this.variables.set('8ball_answer', answers[Math.floor(Math.random() * answers.length)]);
            }

            // my.economy.balance - Solde √©conomique
            else if (line.startsWith('my.economy.balance')) {
                const args = this.parseArguments(line);
                const userId = args[0] || 'user';
                const balance = Math.floor(Math.random() * 1000) + 100;
                this.variables.set('user_balance', `üí∞ ${balance} Maya Coins`);
            }

            // my.economy.daily - Bonus quotidien
            else if (line.startsWith('my.economy.daily')) {
                const dailyBonus = Math.floor(Math.random() * 100) + 50;
                this.variables.set('daily_bonus', `üéÅ Vous avez re√ßu ${dailyBonus} Maya Coins !`);
            }

            // my.url.shorten - Raccourcisseur d'URL
            else if (line.startsWith('my.url.shorten')) {
                const args = this.parseArguments(line);
                const originalUrl = args[0];
                // Simulation d'un raccourcisseur d'URL
                const shortId = Math.random().toString(36).substring(2, 8);
                this.variables.set('short_url', `https://maya.ly/${shortId}`);
            }

            // my.password.generate - G√©n√©rateur de mot de passe
            else if (line.startsWith('my.password.generate')) {
                const args = this.parseArguments(line);
                const length = parseInt(args[0]) || 12;
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
                let password = '';
                for (let i = 0; i < length; i++) {
                    password += chars.charAt(Math.floor(Math.random() * chars.length));
                }
                this.variables.set('generated_password', `üîê ${password}`);
            }

            // my.base64.encode - Encodage Base64
            else if (line.startsWith('my.base64.encode')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                this.variables.set('base64_encoded', Buffer.from(text).toString('base64'));
            }

            // my.base64.decode - D√©codage Base64
            else if (line.startsWith('my.base64.decode')) {
                const args = this.parseArguments(line);
                const encoded = args[0] || '';
                try {
                    this.variables.set('base64_decoded', Buffer.from(encoded, 'base64').toString('utf8'));
                } catch (error) {
                    this.variables.set('base64_decoded', 'Erreur de d√©codage');
                }
            }

            // my.weather - Informations m√©t√©o (simulation)
            else if (line.startsWith('my.weather')) {
                const args = this.parseArguments(line);
                const city = args[0] || 'Paris';
                const temp = Math.floor(Math.random() * 30) + 5;
                const conditions = ['‚òÄÔ∏è Ensoleill√©', '‚õÖ Nuageux', 'üåßÔ∏è Pluvieux', '‚ùÑÔ∏è Neigeux', 'üå§Ô∏è Partiellement nuageux'];
                const condition = conditions[Math.floor(Math.random() * conditions.length)];
                this.variables.set('weather_info', `üå°Ô∏è ${temp}¬∞C √† ${city} - ${condition}`);
            }

            // my.translate - Traducteur (simulation)
            else if (line.startsWith('my.translate')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                const fromLang = args[1] || 'en';
                const toLang = args[2] || 'fr';

                // Traductions simples simul√©es
                const translations = {
                    'hello': 'bonjour',
                    'goodbye': 'au revoir',
                    'thank you': 'merci',
                    'yes': 'oui',
                    'no': 'non'
                };

                const translated = translations[text.toLowerCase()] || `[Traduit de ${fromLang} vers ${toLang}] ${text}`;
                this.variables.set('translated_text', translated);
            }

            // my.level.check - V√©rifier le niveau
            else if (line.startsWith('my.level.check')) {
                const args = this.parseArguments(line);
                const level = Math.floor(Math.random() * 50) + 1;
                const xp = Math.floor(Math.random() * 1000) + 100;
                this.variables.set('user_level', `üìä Niveau ${level} - ${xp} XP`);
            }

            // my.reminder.set - D√©finir un rappel
            else if (line.startsWith('my.reminder.set')) {
                const args = this.parseArguments(line);
                const user = args[0] || 'utilisateur';
                const time = args[1] || '5m';
                const reminder = args[2] || 'Rappel !';
                this.variables.set('reminder_set', `‚è∞ Rappel d√©fini pour ${user} dans ${time}: ${reminder}`);
            }

            // my.event.create - Cr√©er un √©v√©nement
            else if (line.startsWith('my.event.create')) {
                const args = this.parseArguments(line);
                const eventName = args[0] || '√âv√©nement';
                const date = args[1] || 'Bient√¥t';
                const description = args[2] || 'Description de l\'√©v√©nement';
                this.variables.set('event_created', `üìÖ √âv√©nement "${eventName}" cr√©√© pour le ${date}: ${description}`);
            }

            // === NOUVELLES FONCTIONNALIT√âS √âCONOMIE AVANC√âE ===

            // my.economy.shop - Boutique virtuelle
            else if (line.startsWith('my.economy.shop')) {
                const items = ['üéÆ Jeu Vid√©o (500 coins)', 'üçï Pizza (50 coins)', 'üé® Artwork (200 coins)', 'üéµ Musique Premium (150 coins)', '‚≠ê Badge VIP (1000 coins)'];
                this.variables.set('shop_items', items.join('\n'));
            }

            // my.economy.buy - Acheter un item
            else if (line.startsWith('my.economy.buy')) {
                const args = this.parseArguments(line);
                const item = args[0] || 'item';
                const cost = Math.floor(Math.random() * 500) + 50;
                this.variables.set('purchase_result', `üõí Vous avez achet√© ${item} pour ${cost} Maya Coins!`);
            }

            // my.economy.inventory - Inventaire utilisateur
            else if (line.startsWith('my.economy.inventory')) {
                const items = ['üéÆ Jeu Vid√©o x2', 'üçï Pizza x5', 'üé® Artwork x1', '‚≠ê Badge VIP x1'];
                this.variables.set('user_inventory', items.join('\n'));
            }

            // my.economy.trade - √âchange entre utilisateurs
            else if (line.startsWith('my.economy.trade')) {
                const args = this.parseArguments(line);
                const user = args[0] || 'utilisateur';
                const item = args[1] || 'item';
                this.variables.set('trade_offer', `üîÑ Proposition d'√©change avec ${user}: ${item}`);
            }

            // my.economy.lottery - Loterie
            else if (line.startsWith('my.economy.lottery')) {
                const numbers = Array.from({length: 6}, () => Math.floor(Math.random() * 49) + 1);
                const winnings = Math.random() < 0.1 ? Math.floor(Math.random() * 10000) + 1000 : 0;
                this.variables.set('lottery_result', `üé∞ Num√©ros: ${numbers.join('-')} | Gains: ${winnings} coins`);
            }

            // my.economy.bank - Banque virtuelle
            else if (line.startsWith('my.economy.bank')) {
                const args = this.parseArguments(line);
                const action = args[0] || 'balance';
                const amount = args[1] || '0';
                
                if (action === 'deposit') {
                    this.variables.set('bank_action', `üè¶ D√©p√¥t de ${amount} coins effectu√© avec succ√®s!`);
                } else if (action === 'withdraw') {
                    this.variables.set('bank_action', `üè¶ Retrait de ${amount} coins effectu√© avec succ√®s!`);
                } else {
                    const balance = Math.floor(Math.random() * 5000) + 500;
                    this.variables.set('bank_action', `üè¶ Solde bancaire: ${balance} coins`);
                }
            }

            // === JEUX AVANC√âS ===

            // my.game.blackjack - Blackjack
            else if (line.startsWith('my.game.blackjack')) {
                const playerCards = [Math.floor(Math.random() * 11) + 1, Math.floor(Math.random() * 11) + 1];
                const dealerCard = Math.floor(Math.random() * 11) + 1;
                const playerTotal = playerCards.reduce((a, b) => a + b, 0);
                this.variables.set('blackjack_game', `üÉè Vos cartes: ${playerCards.join(', ')} (Total: ${playerTotal})\nüé≤ Carte visible du croupier: ${dealerCard}`);
            }

            // my.game.slots - Machine √† sous
            else if (line.startsWith('my.game.slots')) {
                const symbols = ['üçí', 'üçã', 'üçä', 'üçá', '‚≠ê', 'üíé'];
                const result = [
                    symbols[Math.floor(Math.random() * symbols.length)],
                    symbols[Math.floor(Math.random() * symbols.length)],
                    symbols[Math.floor(Math.random() * symbols.length)]
                ];
                const isWin = result[0] === result[1] && result[1] === result[2];
                this.variables.set('slots_result', `üé∞ ${result.join(' | ')} ${isWin ? 'üéâ JACKPOT!' : '‚ùå Perdu!'}`);
            }

            // my.game.poker - Poker simple
            else if (line.startsWith('my.game.poker')) {
                const suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è'];
                const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
                const hand = Array.from({length: 5}, () => 
                    `${values[Math.floor(Math.random() * values.length)]}${suits[Math.floor(Math.random() * suits.length)]}`
                );
                this.variables.set('poker_hand', `üÉè Votre main: ${hand.join(' ')}`);
            }

            // my.game.quiz - Quiz interactif
            else if (line.startsWith('my.game.quiz')) {
                const questions = [
                    { q: "Quelle est la capitale de la France?", a: "Paris" },
                    { q: "Combien font 2+2?", a: "4" },
                    { q: "Quel est le plus grand oc√©an?", a: "Pacifique" },
                    { q: "En quelle ann√©e a √©t√© cr√©√© Discord?", a: "2015" }
                ];
                const quiz = questions[Math.floor(Math.random() * questions.length)];
                this.variables.set('quiz_question', quiz.q);
                this.variables.set('quiz_answer', quiz.a);
            }

            // my.game.trivia - Culture g√©n√©rale
            else if (line.startsWith('my.game.trivia')) {
                const trivias = [
                    "Les dauphins dorment avec un ≈ìil ouvert!",
                    "Une journ√©e sur V√©nus dure plus longtemps qu'une ann√©e!",
                    "Les bananes sont radioactives!",
                    "Il y a plus d'arbres sur Terre que d'√©toiles dans la Voie lact√©e!",
                    "Le c≈ìur d'une crevette est dans sa t√™te!"
                ];
                this.variables.set('trivia_fact', trivias[Math.floor(Math.random() * trivias.length)]);
            }

            // === FONCTIONNALIT√âS IA ET AUTOMATISATION ===

            // my.ai.chatbot - Chatbot simple
            else if (line.startsWith('my.ai.chatbot')) {
                const args = this.parseArguments(line);
                const input = args[0] || 'hello';
                const responses = {
                    'hello': 'Bonjour! Comment puis-je vous aider?',
                    'how are you': 'Je vais tr√®s bien, merci!',
                    'goodbye': 'Au revoir! Passez une excellente journ√©e!',
                    'help': 'Je peux vous aider avec diverses t√¢ches!'
                };
                this.variables.set('chatbot_response', responses[input.toLowerCase()] || 'Je ne comprends pas cette question.');
            }

            // my.ai.sentiment - Analyse de sentiment
            else if (line.startsWith('my.ai.sentiment')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                const positiveWords = ['super', 'g√©nial', 'excellent', 'fantastique', 'merveilleux'];
                const negativeWords = ['nul', 'horrible', 'terrible', 'affreux', 'mauvais'];
                
                let sentiment = 'neutre üòê';
                if (positiveWords.some(word => text.toLowerCase().includes(word))) {
                    sentiment = 'positif üòä';
                } else if (negativeWords.some(word => text.toLowerCase().includes(word))) {
                    sentiment = 'n√©gatif üòû';
                }
                this.variables.set('sentiment_analysis', `Sentiment d√©tect√©: ${sentiment}`);
            }

            // my.ai.autocomplete - Autocompl√©tion
            else if (line.startsWith('my.ai.autocomplete')) {
                const args = this.parseArguments(line);
                const prefix = args[0] || '';
                const suggestions = [
                    `${prefix}tion`, `${prefix}ment`, `${prefix}able`, `${prefix}ique`, `${prefix}eur`
                ];
                this.variables.set('autocomplete_suggestions', suggestions.join(', '));
            }

            // === R√âSEAUX SOCIAUX ET COMMUNAUT√â ===

            // my.social.follow - Syst√®me de suivi
            else if (line.startsWith('my.social.follow')) {
                const args = this.parseArguments(line);
                const user = args[0] || 'utilisateur';
                this.variables.set('follow_status', `‚úÖ Vous suivez maintenant ${user}!`);
            }

            // my.social.feed - Fil d'actualit√©
            else if (line.startsWith('my.social.feed')) {
                const posts = [
                    "üë§ Alice a partag√© une nouvelle photo!",
                    "üéÆ Bob joue maintenant √† Minecraft!",
                    "üéµ Charlie √©coute de la musique!",
                    "üìö Diana lit un nouveau livre!",
                    "üçï Eve mange une d√©licieuse pizza!"
                ];
                this.variables.set('social_feed', posts.join('\n'));
            }

            // my.social.like - Syst√®me de likes
            else if (line.startsWith('my.social.like')) {
                const args = this.parseArguments(line);
                const post = args[0] || 'publication';
                const likes = Math.floor(Math.random() * 100) + 1;
                this.variables.set('like_status', `‚ù§Ô∏è Vous avez aim√© ${post}! (${likes} likes au total)`);
            }

            // my.social.share - Partage de contenu
            else if (line.startsWith('my.social.share')) {
                const args = this.parseArguments(line);
                const content = args[0] || 'contenu';
                this.variables.set('share_status', `üîÑ Contenu partag√©: ${content}`);
            }

            // my.social.trending - Tendances
            else if (line.startsWith('my.social.trending')) {
                const trends = ['#DiscordMy', '#Gaming', '#Musique', '#Art', '#Programmation', '#Memes', '#Tech'];
                this.variables.set('trending_topics', trends.join(' '));
            }

            // === PRODUCTIVIT√â ET ORGANISATION ===

            // my.todo.add - Ajouter une t√¢che
            else if (line.startsWith('my.todo.add')) {
                const args = this.parseArguments(line);
                const task = args[0] || 'nouvelle t√¢che';
                this.variables.set('todo_added', `‚úÖ T√¢che ajout√©e: ${task}`);
            }

            // my.todo.list - Lister les t√¢ches
            else if (line.startsWith('my.todo.list')) {
                const tasks = [
                    "üìù Terminer le projet",
                    "üõí Faire les courses",
                    "üìö √âtudier Discord.my",
                    "üéÆ Jouer avec les amis",
                    "üíª Coder le bot"
                ];
                this.variables.set('todo_list', tasks.join('\n'));
            }

            // my.calendar.event - √âv√©nement calendrier
            else if (line.startsWith('my.calendar.event')) {
                const args = this.parseArguments(line);
                const event = args[0] || '√âv√©nement';
                const date = args[1] || 'Aujourd\'hui';
                this.variables.set('calendar_event', `üìÖ ${event} programm√© pour ${date}`);
            }

            // my.notes.create - Cr√©er une note
            else if (line.startsWith('my.notes.create')) {
                const args = this.parseArguments(line);
                const note = args[0] || 'Ma note';
                this.variables.set('note_created', `üìù Note cr√©√©e: ${note}`);
            }

            // my.timer.start - D√©marrer un minuteur
            else if (line.startsWith('my.timer.start')) {
                const args = this.parseArguments(line);
                const duration = args[0] || '5m';
                this.variables.set('timer_started', `‚è±Ô∏è Minuteur d√©marr√© pour ${duration}`);
            }

            // === DIVERTISSEMENT AVANC√â ===

            // my.entertainment.movie - Recommandation de film
            else if (line.startsWith('my.entertainment.movie')) {
                const movies = [
                    "üé¨ Inception (2010)",
                    "üé¨ The Matrix (1999)",
                    "üé¨ Interstellar (2014)",
                    "üé¨ Pulp Fiction (1994)",
                    "üé¨ The Shawshank Redemption (1994)"
                ];
                this.variables.set('movie_recommendation', movies[Math.floor(Math.random() * movies.length)]);
            }

            // my.entertainment.music - Recommandation musicale
            else if (line.startsWith('my.entertainment.music')) {
                const songs = [
                    "üéµ Bohemian Rhapsody - Queen",
                    "üéµ Hotel California - Eagles",
                    "üéµ Stairway to Heaven - Led Zeppelin",
                    "üéµ Imagine - John Lennon",
                    "üéµ Billie Jean - Michael Jackson"
                ];
                this.variables.set('music_recommendation', songs[Math.floor(Math.random() * songs.length)]);
            }

            // my.entertainment.book - Recommandation de livre
            else if (line.startsWith('my.entertainment.book')) {
                const books = [
                    "üìö 1984 - George Orwell",
                    "üìö Le Petit Prince - Antoine de Saint-Exup√©ry",
                    "üìö Harry Potter - J.K. Rowling",
                    "üìö Le Seigneur des Anneaux - J.R.R. Tolkien",
                    "üìö Dune - Frank Herbert"
                ];
                this.variables.set('book_recommendation', books[Math.floor(Math.random() * books.length)]);
            }

            // my.entertainment.podcast - Recommandation de podcast
            else if (line.startsWith('my.entertainment.podcast')) {
                const podcasts = [
                    "üéôÔ∏è Podcast Science",
                    "üéôÔ∏è 2 Heures de Perdues",
                    "üéôÔ∏è Les Regardeurs",
                    "üéôÔ∏è Transfert",
                    "üéôÔ∏è Meta de Choc"
                ];
                this.variables.set('podcast_recommendation', podcasts[Math.floor(Math.random() * podcasts.length)]);
            }

            // === S√âCURIT√â ET MOD√âRATION AVANC√âE ===

            // my.security.scan - Scanner de s√©curit√©
            else if (line.startsWith('my.security.scan')) {
                const threats = Math.floor(Math.random() * 5);
                this.variables.set('security_scan', `üîç Scan termin√©: ${threats} menace(s) d√©tect√©e(s)`);
            }

            // my.security.antispam - Anti-spam
            else if (line.startsWith('my.security.antispam')) {
                const args = this.parseArguments(line);
                const message = args[0] || '';
                const isSpam = message.length > 100 || /(.)\1{4,}/.test(message);
                this.variables.set('spam_check', isSpam ? '‚ö†Ô∏è Message d√©tect√© comme spam!' : '‚úÖ Message valide');
            }

            // my.security.verify - Syst√®me de v√©rification
            else if (line.startsWith('my.security.verify')) {
                const verificationCode = Math.floor(Math.random() * 9000) + 1000;
                this.variables.set('verification_code', `üîê Code de v√©rification: ${verificationCode}`);
            }

            // === ANALYSE ET STATISTIQUES ===

            // my.analytics.stats - Statistiques serveur
            else if (line.startsWith('my.analytics.stats')) {
                const stats = {
                    messages: Math.floor(Math.random() * 10000) + 1000,
                    active_users: Math.floor(Math.random() * 500) + 50,
                    channels: Math.floor(Math.random() * 50) + 10
                };
                this.variables.set('server_stats', `üìä Messages: ${stats.messages} | Utilisateurs actifs: ${stats.active_users} | Canaux: ${stats.channels}`);
            }

            // my.analytics.activity - Analyse d'activit√©
            else if (line.startsWith('my.analytics.activity')) {
                const hours = Array.from({length: 24}, (_, i) => `${i}h: ${Math.floor(Math.random() * 100)}`);
                this.variables.set('activity_graph', hours.slice(0, 5).join(', ') + '...');
            }

            // === INT√âGRATIONS EXTERNES ===

            // my.api.github - Int√©gration GitHub
            else if (line.startsWith('my.api.github')) {
                const args = this.parseArguments(line);
                const repo = args[0] || 'mon-repo';
                this.variables.set('github_info', `üêô Repo: ${repo} | ‚≠ê 42 stars | üç¥ 15 forks`);
            }

            // my.api.youtube - Int√©gration YouTube
            else if (line.startsWith('my.api.youtube')) {
                const args = this.parseArguments(line);
                const query = args[0] || 'discord bot';
                this.variables.set('youtube_search', `üé¨ Recherche YouTube: "${query}" - 156 r√©sultats trouv√©s`);
            }

            // my.api.twitter - Int√©gration Twitter
            else if (line.startsWith('my.api.twitter')) {
                const tweets = [
                    "üê¶ Discord.my est incroyable! #coding",
                    "üê¶ Nouveau bot cr√©√© aujourd'hui! #discord",
                    "üê¶ La programmation c'est fantastique! #dev"
                ];
                this.variables.set('latest_tweet', tweets[Math.floor(Math.random() * tweets.length)]);
            }

            // === UTILITAIRES AVANC√âS ===

            // my.utils.color - G√©n√©rateur de couleurs
            else if (line.startsWith('my.utils.color')) {
                const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57', '#FF9FF3', '#54A0FF'];
                this.variables.set('random_color', colors[Math.floor(Math.random() * colors.length)]);
            }

            // my.utils.uuid - G√©n√©rateur UUID
            else if (line.startsWith('my.utils.uuid')) {
                const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                    const r = Math.random() * 16 | 0;
                    const v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
                this.variables.set('generated_uuid', uuid);
            }

            // my.utils.hash - Hachage simple
            else if (line.startsWith('my.utils.hash')) {
                const args = this.parseArguments(line);
                const text = args[0] || 'hello';
                let hash = 0;
                for (let i = 0; i < text.length; i++) {
                    const char = text.charCodeAt(i);
                    hash = ((hash << 5) - hash) + char;
                    hash = hash & hash;
                }
                this.variables.set('text_hash', Math.abs(hash).toString(16));
            }

            // my.utils.encode - Encodage URL
            else if (line.startsWith('my.utils.encode')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                this.variables.set('encoded_url', encodeURIComponent(text));
            }

            // my.utils.decode - D√©codage URL
            else if (line.startsWith('my.utils.decode')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                try {
                    this.variables.set('decoded_url', decodeURIComponent(text));
                } catch {
                    this.variables.set('decoded_url', 'Erreur de d√©codage');
                }
            }

            // === NOTIFICATIONS ET ALERTES ===

            // my.notification.create - Cr√©er notification
            else if (line.startsWith('my.notification.create')) {
                const args = this.parseArguments(line);
                const title = args[0] || 'Notification';
                const message = args[1] || 'Message par d√©faut';
                this.variables.set('notification', `üîî ${title}: ${message}`);
            }

            // my.alert.send - Envoyer alerte
            else if (line.startsWith('my.alert.send')) {
                const args = this.parseArguments(line);
                const type = args[0] || 'info';
                const message = args[1] || 'Alerte';
                const emoji = type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
                this.variables.set('alert_message', `${emoji} ${message}`);
            }

            // === PERSONNALISATION ===

            // my.theme.set - D√©finir th√®me
            else if (line.startsWith('my.theme.set')) {
                const args = this.parseArguments(line);
                const theme = args[0] || 'default';
                const themes = {
                    'dark': 'üåô Th√®me sombre activ√©',
                    'light': '‚òÄÔ∏è Th√®me clair activ√©',
                    'neon': '‚ú® Th√®me n√©on activ√©',
                    'retro': 'üì∫ Th√®me r√©tro activ√©'
                };
                this.variables.set('theme_status', themes[theme] || 'üé® Th√®me par d√©faut');
            }

            // my.profile.customize - Personnaliser profil
            else if (line.startsWith('my.profile.customize')) {
                const args = this.parseArguments(line);
                const element = args[0] || 'avatar';
                this.variables.set('profile_update', `‚ú® ${element} de profil mis √† jour!`);
            }

            // === MINI-JEUX CR√âATIFS ===

            // my.game.riddle - Devinettes
            else if (line.startsWith('my.game.riddle')) {
                const riddles = [
                    { q: "Je suis blanc quand je suis sale. Que suis-je?", a: "Un tableau noir" },
                    { q: "Plus on m'enl√®ve, plus je deviens grand. Que suis-je?", a: "Un trou" },
                    { q: "Je commence la nuit et termine le matin. Que suis-je?", a: "La lettre N" }
                ];
                const riddle = riddles[Math.floor(Math.random() * riddles.length)];
                this.variables.set('riddle_question', riddle.q);
                this.variables.set('riddle_answer', riddle.a);
            }

            // my.game.wordchain - Cha√Æne de mots
            else if (line.startsWith('my.game.wordchain')) {
                const args = this.parseArguments(line);
                const lastWord = args[0] || 'discord';
                const lastLetter = lastWord.slice(-1);
                const suggestions = [`${lastLetter}obot`, `${lastLetter}rogrammation`, `${lastLetter}nalogue`];
                this.variables.set('word_suggestion', suggestions[Math.floor(Math.random() * suggestions.length)]);
            }

            // my.game.memory - Jeu de m√©moire
            else if (line.startsWith('my.game.memory')) {
                const sequence = Array.from({length: 5}, () => Math.floor(Math.random() * 9) + 1);
                this.variables.set('memory_sequence', `üß† M√©morisez: ${sequence.join(' ')}`);
            }

            // === √âDUCATION ET APPRENTISSAGE ===

            // my.learn.vocabulary - Vocabulaire
            else if (line.startsWith('my.learn.vocabulary')) {
                const words = [
                    "üá´üá∑ Bonjour = üá¨üáß Hello",
                    "üá´üá∑ Merci = üá¨üáß Thank you",
                    "üá´üá∑ Au revoir = üá¨üáß Goodbye",
                    "üá´üá∑ Oui = üá¨üáß Yes",
                    "üá´üá∑ Non = üá¨üáß No"
                ];
                this.variables.set('vocab_word', words[Math.floor(Math.random() * words.length)]);
            }

            // my.learn.math - Exercices de maths
            else if (line.startsWith('my.learn.math')) {
                const a = Math.floor(Math.random() * 20) + 1;
                const b = Math.floor(Math.random() * 20) + 1;
                const operations = ['+', '-', '*'];
                const op = operations[Math.floor(Math.random() * operations.length)];
                this.variables.set('math_exercise', `üßÆ Calculez: ${a} ${op} ${b} = ?`);
            }

            // my.learn.coding - Conseils de programmation
            else if (line.startsWith('my.learn.coding')) {
                const tips = [
                    "üí° Toujours commenter votre code!",
                    "üí° Utilisez des noms de variables explicites!",
                    "üí° Testez votre code r√©guli√®rement!",
                    "üí° La pratique rend parfait!",
                    "üí° Apprenez de vos erreurs!"
                ];
                this.variables.set('coding_tip', tips[Math.floor(Math.random() * tips.length)]);
            }

            // === WELLNESS ET SANT√â ===

            // my.wellness.meditation - M√©ditation guid√©e
            else if (line.startsWith('my.wellness.meditation')) {
                const meditations = [
                    "üßò‚Äç‚ôÄÔ∏è Respirez profond√©ment pendant 5 minutes",
                    "üßò‚Äç‚ôÄÔ∏è Concentrez-vous sur votre respiration",
                    "üßò‚Äç‚ôÄÔ∏è Videz votre esprit de toute pens√©e",
                    "üßò‚Äç‚ôÄÔ∏è Imaginez un lieu paisible"
                ];
                this.variables.set('meditation_guide', meditations[Math.floor(Math.random() * meditations.length)]);
            }

            // my.wellness.exercise - Exercices
            else if (line.startsWith('my.wellness.exercise')) {
                const exercises = [
                    "üí™ 20 pompes",
                    "üí™ 30 secondes de planche",
                    "üí™ 15 squats",
                    "üí™ 10 burpees",
                    "üí™ √âtirements pendant 2 minutes"
                ];
                this.variables.set('exercise_suggestion', exercises[Math.floor(Math.random() * exercises.length)]);
            }

            // my.wellness.hydration - Rappel hydratation
            else if (line.startsWith('my.wellness.hydration')) {
                this.variables.set('hydration_reminder', 'üíß N\'oubliez pas de boire de l\'eau! Restez hydrat√©!');
            }

            // === CR√âATIVIT√â ET ART ===

            // my.art.palette - Palette de couleurs
            else if (line.startsWith('my.art.palette')) {
                const palettes = [
                    "üé® Coucher de soleil: #FF6B6B, #FFE66D, #FF8E53",
                    "üé® Oc√©an: #006BA6, #0496FF, #FFBC42",
                    "üé® For√™t: #2D5016, #68A357, #A4D17A",
                    "üé® Pastel: #FFB3C6, #C9A9DD, #A8E6CF"
                ];
                this.variables.set('color_palette', palettes[Math.floor(Math.random() * palettes.length)]);
            }

            // my.art.inspiration - Inspiration artistique
            else if (line.startsWith('my.art.inspiration')) {
                const inspirations = [
                    "üé® Dessinez votre animal pr√©f√©r√©",
                    "üé® Cr√©ez un portrait abstrait",
                    "üé® Illustrez vos √©motions",
                    "üé® Repr√©sentez votre lieu de r√™ve",
                    "üé® M√©langez r√©alisme et fantaisie"
                ];
                this.variables.set('art_inspiration', inspirations[Math.floor(Math.random() * inspirations.length)]);
            }

            // === D√âVELOPPEMENT COMMUNAUTAIRE ===

            // my.community.leaderboard - Classement communaut√©
            else if (line.startsWith('my.community.leaderboard')) {
                const leaders = [
                    "ü•á Alice - 2,450 points",
                    "ü•à Bob - 2,100 points", 
                    "ü•â Charlie - 1,890 points",
                    "4Ô∏è‚É£ Diana - 1,650 points",
                    "5Ô∏è‚É£ Eve - 1,420 points"
                ];
                this.variables.set('community_leaderboard', leaders.join('\n'));
            }

            // my.community.badge - Syst√®me de badges
            else if (line.startsWith('my.community.badge')) {
                const badges = [
                    "üèÜ Premier pas",
                    "‚≠ê Contributeur actif", 
                    "üéØ Expert",
                    "üåü L√©gende",
                    "üëë Champion"
                ];
                this.variables.set('earned_badge', badges[Math.floor(Math.random() * badges.length)]);
            }

            // my.community.achievement - Accomplissements
            else if (line.startsWith('my.community.achievement')) {
                const achievements = [
                    "üéâ Premier message envoy√©!",
                    "üî• S√©rie de 7 jours d'activit√©!",
                    "üí¨ 100 messages envoy√©s!",
                    "üë• 10 amis ajout√©s!",
                    "üéÆ Premier jeu termin√©!"
                ];
                this.variables.set('new_achievement', achievements[Math.floor(Math.random() * achievements.length)]);
            }

            console.log(`üí¨ ${line}`);

        } catch (error) {
            console.error(`‚ùå Erreur lors de l'interpr√©tation de la ligne "${line}":`, error.message);
        }
    }

    // Connexion du bot Discord
    async connectBot() {
        if (!this.token) {
            this.handleError('connection', 'Token manquant pour la connexion');
            return;
        }

        this.client = new Client({
            intents: [
                GatewayIntentBits.Guilds,
                GatewayIntentBits.GuildMessages,
                GatewayIntentBits.MessageContent,
                GatewayIntentBits.GuildMembers,
                GatewayIntentBits.GuildModeration
            ]
        });

        this.client.once('ready', () => {
            console.log(`ü§ñ Bot connect√© en tant que ${this.client.user.tag}!`);
            this.isConnected = true;
        });

        this.client.on('messageCreate', async (message) => {
            if (message.author.bot || !message.content.startsWith(this.prefix)) return;

            const args = message.content.slice(this.prefix.length).trim().split(/ +/);
            const commandName = args.shift().toLowerCase();

            if (this.commands.has(commandName)) {
                const command = this.commands.get(commandName);
                try {
                    await this.executeCommand(command, message, args);
                } catch (error) {
                    console.error(`‚ùå Erreur lors de l'ex√©cution de la commande ${commandName}:`, error);
                }
            }
        });

        try {
            await this.client.login(this.token);
        } catch (error) {
            this.handleError('connection', `√âchec de la connexion: ${error.message}`);
        }
    }

    // D√©finir le statut du bot
    async setStatus(type, activity, status = 'online') {
        if (!this.client || !this.isConnected) return;

        const activityTypes = {
            'playing': ActivityType.Playing,
            'listening': ActivityType.Listening,
            'watching': ActivityType.Watching,
            'streaming': ActivityType.Streaming
        };

        const statusTypes = {
            'online': 'online',
            'idle': 'idle',
            'dnd': 'dnd',
            'invisible': 'invisible'
        };

        try {
            await this.client.user.setPresence({
                activities: [{
                    name: activity,
                    type: activityTypes[type.toLowerCase()] || ActivityType.Playing
                }],
                status: statusTypes[status.toLowerCase()] || 'online'
            });
            console.log(`‚úÖ Statut d√©fini: ${type} ${activity} (${status})`);
        } catch (error) {
            this.handleError('status', `Erreur lors de la d√©finition du statut: ${error.message}`);
        }
    }

    // Cr√©er une commande
    createCommand(name, response, options = []) {
        this.commands.set(name, {
            name: name,
            response: response,
            options: options,
            embed: null,
            actions: [],
            kickParams: null,
            banParams: null,
            dmParams: null,
            pollParams: null,
            reactionParams: null,
            muteParams: null,
            purgeParams: null
        });
        console.log(`üìù Commande cr√©√©e: ${this.prefix}${name}`);
    }

    // Ex√©cuter une commande
    async executeCommand(command, message, args) {
        try {
            // Ex√©cuter les actions de la commande
            for (const action of command.actions) {
                await this.interpretLine(action, message);
            }

            // Ex√©cuter les actions sp√©cifiques avec param√®tres
            if (command.kickParams) {
                const target = command.kickParams.target === 'args[0]' ? args[0] : command.kickParams.target;
                await this.kickMember(message, target, command.kickParams.reason);
            }

            if (command.banParams) {
                const target = command.banParams.target === 'args[0]' ? args[0] : command.banParams.target;
                await this.banMember(message, target, command.banParams.reason);
            }

            if (command.dmParams) {
                const target = command.dmParams.target === 'args[0]' ? args[0] : command.dmParams.target;
                let dmMessage = command.dmParams.message;
                // Remplacer les variables dans le message
                for (const [key, value] of this.variables.entries()) {
                    dmMessage = dmMessage.replace(new RegExp(`{${key}}`, 'g'), value);
                }
                await this.sendDM(message, target, dmMessage);
            }

            if (command.pollParams) {
                await this.createPoll(message, command.pollParams.question, command.pollParams.options);
            }

            if (command.reactionParams) {
                const emojis = command.reactionParams.emojis || [command.reactionParams.emoji || 'üëç'];
                for (const emoji of emojis) {
                    try {
                        await message.react(emoji);
                    } catch (error) {
                        console.error(`Erreur lors de l'ajout de la r√©action ${emoji}:`, error);
                    }
                }
            }

            if (command.muteParams) {
                const target = command.muteParams.target === 'args[0]' ? args[0] : command.muteParams.target;
                await this.muteMember(message, target, command.muteParams.duration, command.muteParams.reason);
            }

            if (command.purgeParams) {
                const amount = command.purgeParams.amount === 'args[0]' ? args[0] : command.purgeParams.amount;
                await this.purgeMessages(message, amount);
            }

            if (command.roleParams) {
                const target = command.roleParams.target === 'args[0]' ? args[0] : command.roleParams.target;
                await this.manageRole(message, target, command.roleParams.action, command.roleParams.role);
            }

            // Envoyer l'embed si d√©fini
            if (command.embed) {
                await this.sendEmbed(message, command.embed);
            } 
            // Sinon envoyer la r√©ponse normale
            else if (command.response && command.response !== 'embed') {
                let response = command.response;
                // Remplacer les variables dans la r√©ponse
                for (const [key, value] of this.variables.entries()) {
                    response = response.replace(new RegExp(`{${key}}`, 'g'), value);
                }
                await message.reply(response);
            }
        } catch (error) {
            console.error(`‚ùå Erreur lors de l'ex√©cution de la commande ${command.name}:`, error);
            await message.reply('‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.');
        }
    }

    // Envoyer un embed
    async sendEmbed(message, args) {
        const embed = new EmbedBuilder();

        // Parser les arguments de l'embed
        for (let i = 0; i < args.length; i += 2) {
            const key = args[i]?.toLowerCase();
            let value = args[i + 1];

            // Remplacer les variables dans les valeurs
            if (value) {
                for (const [varKey, varValue] of this.variables.entries()) {
                    value = value.replace(new RegExp(`{${varKey}}`, 'g'), varValue);
                }
            }

            switch (key) {
                case 'title':
                    embed.setTitle(value);
                    break;
                case 'description':
                    embed.setDescription(value);
                    break;
                case 'color':
                    embed.setColor(value);
                    break;
                case 'footer':
                    embed.setFooter({ text: value });
                    break;
                case 'image':
                    embed.setImage(value);
                    break;
                case 'thumbnail':
                    embed.setThumbnail(value);
                    break;
                case 'author':
                    embed.setAuthor({ name: value });
                    break;
                case 'url':
                    embed.setURL(value);
                    break;
                case 'timestamp':
                    if (value === 'now') {
                        embed.setTimestamp();
                    }
                    break;
                case 'field':
                    // Format: field, "nom", "valeur", inline(true/false)
                    const fieldName = args[i + 1];
                    const fieldValue = args[i + 2];
                    const fieldInline = args[i + 3] === 'true';
                    embed.addFields({ name: fieldName, value: fieldValue, inline: fieldInline });
                    i += 2; // Skip les arguments suppl√©mentaires
                    break;
            }
        }

        // Remplacer les variables dans les champs de l'embed
        if (embed.data.title) {
            embed.data.title = this.replaceVariables(embed.data.title, message);
        }
        if (embed.data.description) {
            embed.data.description = this.replaceVariables(embed.data.description, message);
        }
        if (embed.data.footer && embed.data.footer.text) {
            embed.data.footer.text = this.replaceVariables(embed.data.footer.text, message);
        }
        if (embed.data.author && embed.data.author.name) {
            embed.data.author.name = this.replaceVariables(embed.data.author.name, message);
        }

        await message.reply({ embeds: [embed] });
    }

    // Fonction pour remplacer les variables
    replaceVariables(text, message) {
        if (!text) return text;

        // Remplacer les variables dans le texte
        text = text.replace(/{(\w+)}/g, (match, varName) => {
            return this.variables.get(varName) || match;
        });

        // Variables sp√©ciales
        text = text.replace(/{user}/g, message?.author?.username || 'Utilisateur');
        text = text.replace(/{server}/g, message?.guild?.name || 'Serveur');
        text = text.replace(/{channel}/g, message?.channel?.name || 'Channel');
        text = text.replace(/{member_count}/g, message?.guild?.memberCount || '0');

        return text;
    }

    // Obtenir une image al√©atoire depuis une API
    async getRandomImage(category) {
        const images = {
            'cats': [
                'https://cataas.com/cat',
                'https://cdn2.thecatapi.com/images/9p1.jpg',
                'https://cdn2.thecatapi.com/images/1sq.jpg'
            ],
            'dogs': [
                'https://dog.ceo/api/img/vizsla/n02100583_10508.jpg',
                'https://dog.ceo/api/img/hound-english/n02089973_2309.jpg',
                'https://dog.ceo/api/img/spaniel-brittany/n02101388_5739.jpg'
            ],
            'foxes': [
                'https://randomfox.ca/images/1.jpg',
                'https://randomfox.ca/images/2.jpg',
                'https://randomfox.ca/images/3.jpg'
            ],
            'memes': [
                'https://i.imgflip.com/1bij.jpg',
                'https://i.imgflip.com/30b1gx.jpg',
                'https://i.imgflip.com/26am.jpg'
            ],
            'anime': [
                'https://cdn.waifu.pics/sfw/neko/1.jpg',
                'https://cdn.waifu.pics/sfw/neko/2.jpg',
                'https://cdn.waifu.pics/sfw/neko/3.jpg'
            ]
        };

        try {
            const categoryImages = images[category.toLowerCase()] || images.cats;
            const randomIndex = Math.floor(Math.random() * categoryImages.length);
            return categoryImages[randomIndex];
        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration d\'image:', error);
            return 'https://via.placeholder.com/400x300?text=Error+loading+image';
        }
    }

    // Kick un membre
    async kickMember(message, userMention, reason = 'Aucune raison sp√©cifi√©e') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.KickMembers)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour kick des membres.');
            return;
        }

        const userId = userMention.replace(/[<@!>]/g, '');
        const member = message.guild.members.cache.get(userId);

        if (!member) {
            await message.reply('‚ùå Membre introuvable.');
            return;
        }

        try {
            await member.kick(reason);
            await message.reply(`‚úÖ ${member.user.tag} a √©t√© kick√©. Raison: ${reason}`);
        } catch (error) {
            await message.reply('‚ùå Impossible de kick ce membre.');
        }
    }

    // Ban un membre
    async banMember(message, userMention, reason = 'Aucune raison sp√©cifi√©e') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.BanMembers)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour ban des membres.');
            return;
        }

        const userId = userMention.replace(/[<@!>]/g, '');
        const member = message.guild.members.cache.get(userId);

        if (!member) {
            await message.reply('‚ùå Membre introuvable.');
            return;
        }

        try {
            await member.ban({ reason: reason });
            await message.reply(`‚úÖ ${member.user.tag} a √©t√© banni. Raison: ${reason}`);
        } catch (error) {
            await message.reply('‚ùå Impossible de ban ce membre.');
        }
    }

    // Envoyer un message priv√©
    async sendDM(message, userMention, content) {
        const userId = userMention.replace(/[<@!>]/g, '');
        const user = message.client.users.cache.get(userId);

        if (!user) {
            await message.reply('‚ùå Utilisateur introuvable.');
            return;
        }

        try {
            await user.send(content);
            await message.reply(`‚úÖ Message priv√© envoy√© √† ${user.tag}`);
        } catch (error) {
            await message.reply('‚ùå Impossible d\'envoyer le message priv√©.');
        }
    }

    // G√©rer les r√¥les
    async manageRole(message, action, userMention, roleName) {
        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour g√©rer les r√¥les.');
            return;
        }

        const userId = userMention.replace(/[<@!>]/g, '');
        const member = message.guild.members.cache.get(userId);
        const role = message.guild.roles.cache.find(r => r.name === roleName);

        if (!member || !role) {
            await message.reply('‚ùå Membre ou r√¥le introuvable.');
            return;
        }

        try {
            if (action === 'add') {
                await member.roles.add(role);
                await message.reply(`‚úÖ R√¥le ${roleName} ajout√© √† ${member.user.tag}`);
            } else if (action === 'remove') {
                await member.roles.remove(role);
                await message.reply(`‚úÖ R√¥le ${roleName} retir√© de ${member.user.tag}`);
            }
        } catch (error) {
            await message.reply('‚ùå Erreur lors de la gestion du r√¥le.');
        }
    }

    // G√©rer les canaux
    async manageChannel(message, action, channelName, channelType = 'text') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour g√©rer les canaux.');
            return;
        }

        try {
            if (action === 'create') {
                const channelTypeMap = {
                    'text': ChannelType.GuildText,
                    'voice': ChannelType.GuildVoice,
                    'category': ChannelType.GuildCategory
                };

                await message.guild.channels.create({
                    name: channelName,
                    type: channelTypeMap[channelType] || ChannelType.GuildText
                });
                await message.reply(`‚úÖ Canal ${channelName} cr√©√©`);
            } else if (action === 'delete') {
                const channel = message.guild.channels.cache.find(c => c.name === channelName);
                if (channel) {
                    await channel.delete();
                    await message.reply(`‚úÖ Canal ${channelName} supprim√©`);
                } else {
                    await message.reply('‚ùå Canal introuvable.');
                }
            }
        } catch (error) {
            await message.reply('‚ùå Erreur lors de la gestion du canal.');
        }
    }

    // Cr√©er un sondage
    async createPoll(message, question, options) {
        const embed = new EmbedBuilder()
            .setTitle('üìä Sondage')
            .setDescription(question)
            .setColor('#3498db')
            .setTimestamp();

        let description = question + '\n\n';
        const emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];

        for (let i = 0; i < Math.min(options.length, 10); i++) {
            description += `${emojis[i]} ${options[i]}\n`;
        }

        embed.setDescription(description);

        const pollMessage = await message.reply({ embeds: [embed] });

        for (let i = 0; i < Math.min(options.length, 10); i++) {
            await pollMessage.react(emojis[i]);
        }
    }

    // Calculatrice simple
    calculateMath(expression) {
        try {
            // S√©curit√© basique - seulement les op√©rations math√©matiques de base
            const sanitized = expression.replace(/[^0-9+\-*/().\s]/g, '');
            return Function('"use strict"; return (' + sanitized + ')')();
        } catch (error) {
            return 'Erreur de calcul';
        }
    }

    // Obtenir l'heure format√©e
    getFormattedTime(format) {
        const now = new Date();

        switch (format.toLowerCase()) {
            case 'time':
                return now.toLocaleTimeString('fr-FR');
            case 'date':
                return now.toLocaleDateString('fr-FR');
            case 'full':
                return now.toLocaleString('fr-FR');
            case 'iso':
                return now.toISOString();
            default:
                return now.toLocaleString('fr-FR');
        }
    }

    // Obtenir les informations du serveur
    async getServerInfo(message) {
        const guild = message.guild;
        const embed = new EmbedBuilder()
            .setTitle(`üè∞ Informations du serveur: ${guild.name}`)
            .setDescription(`**ID:** ${guild.id}\n**Propri√©taire:** <@${guild.ownerId}>\n**Membres:** ${guild.memberCount}\n**Canaux:** ${guild.channels.cache.size}\n**R√¥les:** ${guild.roles.cache.size}\n**Cr√©√© le:** ${guild.createdAt.toLocaleDateString('fr-FR')}`)
            .setColor('#3498db')
            .setThumbnail(guild.iconURL() || null)
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    }

    // Obtenir les informations d'un utilisateur
    async getUserInfo(message, userMention) {
        let user;
        if (userMention) {
            const userId = userMention.replace(/[<@!>]/g, '');
            user = message.guild.members.cache.get(userId)?.user || message.client.users.cache.get(userId);
        } else {
            user = message.author;
        }

        if (!user) {
            await message.reply('‚ùå Utilisateur introuvable.');
            return;
        }

        const member = message.guild.members.cache.get(user.id);
        const embed = new EmbedBuilder()
            .setTitle(`üë§ Informations: ${user.tag}`)
            .setDescription(`**ID:** ${user.id}\n**Cr√©√© le:** ${user.createdAt.toLocaleDateString('fr-FR')}\n**A rejoint le:** ${member ? member.joinedAt.toLocaleDateString('fr-FR') : 'N/A'}\n**Bot:** ${user.bot ? 'Oui' : 'Non'}`)
            .setColor('#e74c3c')
            .setThumbnail(user.displayAvatarURL())
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    }

    // Mute un membre
    async muteMember(message, userMention, duration = '10m', reason = 'Aucune raison sp√©cifi√©e') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour mute des membres.');
            return;
        }

        const userId = userMention.replace(/[<@!>]/g, '');
        const member = message.guild.members.cache.get(userId);

        if (!member) {
            await message.reply('‚ùå Membre introuvable.');
            return;
        }

        // Convertir la dur√©e en millisecondes
        const timeUnits = { 's': 1000, 'm': 60000, 'h': 3600000, 'd': 86400000 };
        const unit = duration.slice(-1);
        const time = parseInt(duration.slice(0, -1)) * (timeUnits[unit] || 60000);

        try {
            await member.timeout(time, reason);
            await message.reply(`üîá ${member.user.tag} a √©t√© mute pour ${duration}. Raison: ${reason}`);
        } catch (error) {
            await message.reply('‚ùå Impossible de mute ce membre.');
        }
    }

    // Supprimer des messages
    async purgeMessages(message, amount = '10') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour supprimer des messages.');
            return;
        }

        const deleteCount = parseInt(amount);
        if (isNaN(deleteCount) || deleteCount <= 0 || deleteCount > 100) {
            await message.reply('‚ùå Veuillez fournir un nombre entre 1 et 100.');
            return;
        }

        try {
            const messages = await message.channel.messages.fetch({ limit: deleteCount });
            await message.channel.bulkDelete(messages);

            const confirmMessage = await message.reply(`üóëÔ∏è ${deleteCount} messages supprim√©s.`);
            setTimeout(() => confirmMessage.delete().catch(() => {}), 5000);
        } catch (error) {
            await message.reply('‚ùå Erreur lors de la suppression des messages.');
        }
    }

    // Obtenir l'avatar d'un utilisateur
    async getUserAvatar(message, userMention) {
        let user;
        if (userMention) {
            const userId = userMention.replace(/[<@!>]/g, '');
            user = message.guild.members.cache.get(userId)?.user || message.client.users.cache.get(userId);
        } else {
            user = message.author;
        }

        if (!user) {
            await message.reply('‚ùå Utilisateur introuvable.');
            return;
        }

        const embed = new EmbedBuilder()
            .setTitle(`üñºÔ∏è Avatar de ${user.tag}`)
            .setImage(user.displayAvatarURL({ size: 512 }))
            .setColor('#9b59b6')
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    }

    // Interpr√©ter un fichier .my
    async interpretFile(filename) {
        try {
            const content = fs.readFileSync(filename, 'utf8');
            const lines = content.split('\n');

            console.log(`üöÄ D√©marrage du bot Discord.my depuis ${filename}`);

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                await this.interpretLine(line);

                // G√©rer les embeds qui suivent une commande
                if (line.startsWith('my.discord.command') && i + 1 < lines.length) {
                    let nextLineIndex = i + 1;
                    // Chercher les embeds et actions qui suivent
                    while (nextLineIndex < lines.length) {
                        const nextLine = lines[nextLineIndex].trim();
                        if (nextLine.startsWith('my.discord.embed') || 
                            nextLine.startsWith('my.random.') ||
                            nextLine.startsWith('my.math.') ||
                            nextLine.startsWith('my.time.')) {
                            await this.interpretLine(nextLine);
                            i = nextLineIndex; // Avancer l'index principal
                            nextLineIndex++;
                        } else if (nextLine && !nextLine.startsWith('//') && !nextLine.startsWith('my.discord.command')) {
                            // Ligne non reconnue, arr√™ter
                            break;
                        } else {
                            break;
                        }
                    }
                }
            }

            // Garder le processus en vie
            if (this.isConnected) {
                console.log(`‚úÖ Bot ${filename} d√©marr√© avec succ√®s! Appuyez sur Ctrl+C pour arr√™ter.`);
                process.on('SIGINT', () => {
                    console.log('\nüî¥ Arr√™t du bot...');
                    if (this.client) {
                        this.client.destroy();
                    }
                    process.exit(0);
                });
            }
        } catch (error) {
            console.error(`‚ùå Erreur lors de la lecture du fichier ${filename}: ${error.message}`);
        }
    }

    // Statistiques du bot
    async getBotStats(message) {
        const uptime = process.uptime();
        const uptimeString = this.formatUptime(uptime);

        const embed = new EmbedBuilder()
            .setTitle('ü§ñ Statistiques du bot')
            .addFields(
                { name: '‚è±Ô∏è Uptime', value: uptimeString, inline: true },
                { name: 'üíæ M√©moire utilis√©e', value: `${(process.memoryUsage().rss / 1024 / 1024).toFixed(2)} MB`, inline: true },
                { name: 'üë• Serveurs', value: `${this.client.guilds.cache.size}`, inline: true },
                { name: 'üèì Ping', value: `${this.client.ws.ping}ms`, inline: true }
            )
            .setColor('#2ecc71')
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    }

    // Formater l'uptime
    formatUptime(seconds) {
        const d = Math.floor(seconds / (3600 * 24));
        const h = Math.floor(seconds % (3600 * 24) / 3600);
        const m = Math.floor(seconds % 3600 / 60);
        const s = Math.floor(seconds % 60);

        const dDisplay = d > 0 ? d + (d === 1 ? " jour, " : " jours, ") : "";
        const hDisplay = h > 0 ? h + (h === 1 ? " heure, " : " heures, ") : "";
        const mDisplay = m > 0 ? m + (m === 1 ? " minute, " : " minutes, ") : "";
        const sDisplay = s > 0 ? s + (s === 1 ? " seconde" : " secondes") : "";
        return dDisplay + hDisplay + mDisplay + sDisplay;
    }
}

// CLI pour Discord.my
if (require.main === module) {
    const args = process.argv.slice(2);

    if (args.length === 0) {
        console.log(`
ü§ñ Discord.my - Cr√©ateur de bots Discord en Maya

Usage:
  maya Discord.my-allume <fichier.my>

Exemple:
  maya Discord.my-allume mon_bot.my
        `);
        process.exit(1);
    }

    const filename = args[0];
    if (!fs.existsSync(filename)) {
        console.error(`‚ùå Fichier ${filename} introuvable.`);
        process.exit(1);
    }

    const bot = new DiscordMyBot();
    bot.interpretFile(filename);
}

module.exports = DiscordMyBot;