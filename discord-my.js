const { Client, GatewayIntentBits, EmbedBuilder, PermissionsBitField, ChannelType, ActivityType } = require('discord.js');
const fs = require('fs');
const path = require('path');
// Import dynamique de node-fetch pour la compatibilit√© ESM
let fetch;
(async () => {
    const nodeFetch = await import('node-fetch');
    fetch = nodeFetch.default;
})();

class DiscordMyBot {
    constructor() {
        this.client = null;
        this.prefix = '!';
        this.commands = new Map();
        this.variables = new Map();
        this.errorMessages = new Map();
        this.token = null;
        this.isConnected = false;
        this.currentCommand = null;
        this.parrotConfig = {
            enabled: false,
            channels: ['all'],
            excludeCommands: true,
            excludeBots: true,
            delay: 0,
            prefix: '',
            suffix: '',
            blacklist: [],
            whitelist: []
        };
        this.economy = new Map(); // Base de donn√©es √©conomie en m√©moire
        this.userProfiles = new Map(); // Profils utilisateurs
        this.reminders = new Map(); // Syst√®me de rappels
        this.todos = new Map(); // Syst√®me de t√¢ches
        this.inventory = new Map(); // Inventaires utilisateurs
    }

    // Fonction pour g√©rer les erreurs personnalis√©es
    handleError(errorType, customMessage = null) {
        const defaultMessage = this.errorMessages.get(errorType) || 'Une erreur est survenue.';
        console.error(`‚ùå ${customMessage || defaultMessage}`);
    }

    // Parser pour extraire les arguments d'une fonction Maya
    parseArguments(line) {
        const start = line.indexOf('(');
        const end = line.lastIndexOf(')');
        if (start === -1 || end === -1) return [];

        const argsStr = line.substring(start + 1, end).trim();
        if (!argsStr) return [];

        const args = [];
        let current = '';
        let inQuotes = false;
        let quoteChar = '';

        for (let i = 0; i < argsStr.length; i++) {
            const char = argsStr[i];

            if ((char === '"' || char === "'") && !inQuotes) {
                inQuotes = true;
                quoteChar = char;
            } else if (char === quoteChar && inQuotes) {
                inQuotes = false;
                quoteChar = '';
            } else if (char === ',' && !inQuotes) {
                args.push(current.trim().replace(/^['"]|['"]$/g, ''));
                current = '';
                continue;
            }

            current += char;
        }

        if (current.trim()) {
            args.push(current.trim().replace(/^['"]|['"]$/g, ''));
        }

        return args;
    }

    // Interpr√©ter une ligne de code Discord.my
    async interpretLine(line, message = null, commandContext = null) {
        line = line.trim();
        if (!line || line.startsWith('//')) return;

        try {
            // my.discord.connect - Connexion du bot
            if (line.startsWith('my.discord.connect')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    this.token = args[0];
                    await this.connectBot();
                }
            }

            // my.discord.prefix - D√©finir le pr√©fixe
            else if (line.startsWith('my.discord.prefix')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    this.prefix = args[0];
                    console.log(`üîß Pr√©fixe d√©fini: ${this.prefix}`);
                }
            }

            // my.discord.status - D√©finir le statut
            else if (line.startsWith('my.discord.status')) {
                const args = this.parseArguments(line);
                if (args.length >= 2) {
                    await this.setStatus(args[0], args[1], args[2] || null);
                }
            }

            // my.discord.command - Cr√©er une commande
            else if (line.startsWith('my.discord.command')) {
                const args = this.parseArguments(line);
                if (args.length >= 2) {
                    this.createCommand(args[0], args[1], args.slice(2));
                    this.currentCommand = args[0];
                }
            }

            // my.discord.embed - Cr√©er un embed
            else if (line.startsWith('my.discord.embed')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).embed = args;
                } else if (message) {
                    await this.sendEmbed(message, args);
                }
            }

            // my.discord.send - Envoyer un message
            else if (line.startsWith('my.discord.send') && message) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    await message.reply(args[0]);
                }
            }

            // my.discord.error - D√©finir un message d'erreur personnalis√©
            else if (line.startsWith('my.discord.error')) {
                const args = this.parseArguments(line);
                if (args.length >= 2) {
                    this.errorMessages.set(args[0], args[1]);
                }
            }

            // my.variable - Cr√©er une variable
            else if (line.startsWith('my.variable')) {
                const parts = line.split('=');
                if (parts.length === 2) {
                    const varName = parts[0].replace('my.variable', '').trim();
                    const varValue = parts[1].trim().replace(/^['"]|['"]$/g, '');
                    this.variables.set(varName, varValue);
                }
            }

            // my.random.number - G√©n√©rer un nombre al√©atoire
            else if (line.startsWith('my.random.number')) {
                const args = this.parseArguments(line);
                const min = parseInt(args[0]) || 1;
                const max = parseInt(args[1]) || 100;
                const randomNum = Math.floor(Math.random() * (max - min + 1)) + min;
                this.variables.set('random', randomNum.toString());

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(`üé≤ Nombre al√©atoire: ${randomNum}`);
                }
                return randomNum;
            }

            // my.random.image - Images al√©atoires avec vraies APIs
            else if (line.startsWith('my.random.image')) {
                const args = this.parseArguments(line);
                const category = args[0] || 'cats';
                const imageUrl = await this.getRealRandomImage(category);
                this.variables.set('random_image', imageUrl);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    const embed = new EmbedBuilder()
                        .setTitle(`üñºÔ∏è Image al√©atoire: ${category}`)
                        .setImage(imageUrl)
                        .setColor('#ff6b6b');
                    await message.reply({ embeds: [embed] });
                }
                return imageUrl;
            }

            // my.weather - API m√©t√©o r√©elle
            else if (line.startsWith('my.weather')) {
                const args = this.parseArguments(line);
                const city = args[0] || 'Paris';
                const weatherInfo = await this.getRealWeather(city);
                this.variables.set('weather_info', weatherInfo);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(weatherInfo);
                }
                return weatherInfo;
            }

            // my.translate - API traduction r√©elle
            else if (line.startsWith('my.translate')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                const fromLang = args[1] || 'en';
                const toLang = args[2] || 'fr';
                const translated = await this.realTranslate(text, fromLang, toLang);
                this.variables.set('translated_text', translated);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(`üåê Traduction: ${translated}`);
                }
                return translated;
            }

            // my.random.choice - Choix al√©atoire
            else if (line.startsWith('my.random.choice')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    const randomChoice = args[Math.floor(Math.random() * args.length)];
                    this.variables.set('random_choice', randomChoice);

                    // Si on est dans le contexte d'une commande, stocker l'action
                    if (this.currentCommand && this.commands.has(this.currentCommand)) {
                        this.commands.get(this.currentCommand).actions.push(line);
                    } else if (message) {
                        await message.reply(`üéØ Choix al√©atoire: **${randomChoice}**`);
                    }
                    return randomChoice;
                }
            }

            // my.discord.kick - Kick un membre
            else if (line.startsWith('my.discord.kick')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de kick dans la commande
                    this.commands.get(this.currentCommand).kickParams = {
                        target: args[0] || 'args[0]',
                        reason: args[1] || 'Aucune raison sp√©cifi√©e'
                    };
                } else if (message) {
                    await this.kickMember(message, args[0], args[1]);
                }
            }

            // my.discord.ban - Ban un membre
            else if (line.startsWith('my.discord.ban')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de ban dans la commande
                    this.commands.get(this.currentCommand).banParams = {
                        target: args[0] || 'args[0]',
                        reason: args[1] || 'Aucune raison sp√©cifi√©e'
                    };
                } else if (message) {
                    await this.banMember(message, args[0], args[1]);
                }
            }

            // my.console - Afficher dans la console
            else if (line.startsWith('my.console')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    console.log(`üí¨ ${args[0]}`);
                }
            }

            // my.discord.dm - Envoyer un message priv√©
            else if (line.startsWith('my.discord.dm')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de DM dans la commande
                    this.commands.get(this.currentCommand).dmParams = {
                        target: args[0] || 'args[0]',
                        message: args[1] || 'Message par d√©faut'
                    };
                } else if (message && args.length >= 2) {
                    await this.sendDM(message, args[0], args[1]);
                }
            }

            // my.discord.role - G√©rer les r√¥les
            else if (line.startsWith('my.discord.role')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de r√¥le dans la commande
                    this.commands.get(this.currentCommand).roleParams = {
                        action: args[0] || 'add',
                        target: args[1] || 'args[0]',
                        role: args[2] || 'Membre'
                    };
                } else if (message && args.length >= 3) {
                    await this.manageRole(message, args[1], args[0], args[2]);
                }
            }

            // my.discord.channel - G√©rer les canaux
            else if (line.startsWith('my.discord.channel') && message) {
                const args = this.parseArguments(line);
                if (args.length >= 2) {
                    await this.manageChannel(message, args[0], args[1], args[2]);
                }
            }

            // my.discord.poll - Cr√©er un sondage
            else if (line.startsWith('my.discord.poll')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de sondage dans la commande
                    this.commands.get(this.currentCommand).pollParams = {
                        question: args[0] || 'Sondage',
                        options: args.slice(1)
                    };
                } else if (message && args.length >= 2) {
                    await this.createPoll(message, args[0], args.slice(1));
                }
            }

            // my.discord.react - Ajouter une r√©action (corriger le nom)
            else if (line.startsWith('my.discord.react')) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    // Stocker les param√®tres de r√©action dans la commande
                    this.commands.get(this.currentCommand).reactionParams = {
                        emojis: args.length > 0 ? args : ['üëç']
                    };
                } else if (message && args.length > 0) {
                    for (const emoji of args) {
                        try {
                            await message.react(emoji);
                        } catch (error) {
                            console.error(`Erreur lors de l'ajout de la r√©action ${emoji}:`, error);
                        }
                    }
                }
            }

            // my.discord.server.info - Informations du serveur
            else if (line.startsWith('my.discord.server.info') && message) {
                await this.getServerInfo(message);
            }

            // my.discord.user.info - Informations de l'utilisateur
            else if (line.startsWith('my.discord.user.info') && message) {
                const args = this.parseArguments(line);
                await this.getUserInfo(message, args[0]);
            }

            // my.discord.mute - Mute un membre
            else if (line.startsWith('my.discord.mute') && message) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).muteParams = {
                        target: args[0],
                        duration: args[1] || '10m',
                        reason: args[2] || 'Aucune raison sp√©cifi√©e'
                    };
                } else {
                    await this.muteMember(message, args[0], args[1], args[2]);
                }
            }

            // my.discord.purge - Supprimer des messages
            else if (line.startsWith('my.discord.purge') && message) {
                const args = this.parseArguments(line);
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).purgeParams = {
                        amount: args[0] || '10'
                    };
                } else {
                    await this.purgeMessages(message, args[0]);
                }
            }

            // my.discord.avatar - Obtenir l'avatar d'un utilisateur
            else if (line.startsWith('my.discord.avatar') && message) {
                const args = this.parseArguments(line);
                await this.getUserAvatar(message, args[0]);
            }

            // my.math.calculate - Calculatrice
            else if (line.startsWith('my.math.calculate')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    const result = this.calculateMath(args[0]);
                    this.variables.set('math_result', result.toString());

                    // Si on est dans le contexte d'une commande, stocker l'action
                    if (this.currentCommand && this.commands.has(this.currentCommand)) {
                        this.commands.get(this.currentCommand).actions.push(line);
                    } else if (message) {
                        await message.reply(`üßÆ R√©sultat: ${args[0]} = **${result}**`);
                    }
                    return result;
                }
            }

            // my.time.format - Obtenir l'heure format√©e
            else if (line.startsWith('my.time.format')) {
                const args = this.parseArguments(line);
                const format = args[0] || 'full';
                const time = this.getFormattedTime(format);
                this.variables.set('current_time', time);

                // Si on est dans le contexte d'une commande, stocker l'action
                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(`‚è∞ Heure actuelle: ${time}`);
                }
                return time;
            }

            // my.discord.stats - Statistiques du bot
            else if (line.startsWith('my.discord.stats') && message) {
                await this.getBotStats(message);
            }

            // my.economy.balance - Syst√®me √©conomie r√©el
            else if (line.startsWith('my.economy.balance')) {
                const args = this.parseArguments(line);
                const userId = args[0] || (message ? message.author.id : 'user');
                const balance = this.getEconomyBalance(userId);
                this.variables.set('user_balance', `üí∞ ${balance} Maya Coins`);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(`üí∞ Votre solde: ${balance} Maya Coins`);
                }
                return balance;
            }

            // my.economy.daily - Bonus quotidien r√©el
            else if (line.startsWith('my.economy.daily')) {
                const userId = message ? message.author.id : 'user';
                const dailyResult = this.claimDailyBonus(userId);
                this.variables.set('daily_bonus', dailyResult);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(dailyResult);
                }
                return dailyResult;
            }

            // my.economy.shop - Boutique r√©elle
            else if (line.startsWith('my.economy.shop')) {
                const shopItems = this.getShopItems();
                this.variables.set('shop_items', shopItems);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    const embed = new EmbedBuilder()
                        .setTitle('üõí Boutique Maya')
                        .setDescription(shopItems)
                        .setColor('#f39c12');
                    await message.reply({ embeds: [embed] });
                }
                return shopItems;
            }

            // my.economy.buy - Achat r√©el
            else if (line.startsWith('my.economy.buy')) {
                const args = this.parseArguments(line);
                const item = args[0] || '';
                const userId = message ? message.author.id : 'user';
                const purchaseResult = this.buyItem(userId, item);
                this.variables.set('purchase_result', purchaseResult);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(purchaseResult);
                }
                return purchaseResult;
            }

            // my.reminder.set - Syst√®me de rappels r√©el
            else if (line.startsWith('my.reminder.set')) {
                const args = this.parseArguments(line);
                const userId = message ? message.author.id : args[0];
                const time = args[1] || '5m';
                const reminderText = args[2] || 'Rappel !';
                const reminderId = this.setRealReminder(userId, time, reminderText, message);
                this.variables.set('reminder_set', `‚è∞ Rappel d√©fini avec l'ID: ${reminderId}`);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(`‚è∞ Rappel d√©fini pour ${time}: ${reminderText} (ID: ${reminderId})`);
                }
                return reminderId;
            }

            // my.todo.add - Syst√®me de t√¢ches r√©el
            else if (line.startsWith('my.todo.add')) {
                const args = this.parseArguments(line);
                const task = args[0] || 'nouvelle t√¢che';
                const userId = message ? message.author.id : 'user';
                const taskId = this.addTodoTask(userId, task);
                this.variables.set('todo_added', `‚úÖ T√¢che ajout√©e avec l'ID: ${taskId}`);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(`‚úÖ T√¢che ajout√©e: ${task} (ID: ${taskId})`);
                }
                return taskId;
            }

            // my.todo.list - Liste des t√¢ches r√©elle
            else if (line.startsWith('my.todo.list')) {
                const userId = message ? message.author.id : 'user';
                const todoList = this.getTodoList(userId);
                this.variables.set('todo_list', todoList);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    const embed = new EmbedBuilder()
                        .setTitle('üìù Vos T√¢ches')
                        .setDescription(todoList || 'Aucune t√¢che')
                        .setColor('#3498db');
                    await message.reply({ embeds: [embed] });
                }
                return todoList;
            }

            // my.qr.generate - G√©n√©rateur QR r√©el
            else if (line.startsWith('my.qr.generate')) {
                const args = this.parseArguments(line);
                const text = args[0] || 'Discord.my';
                const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(text)}`;
                this.variables.set('qr_url', qrUrl);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    const embed = new EmbedBuilder()
                        .setTitle('üîó QR Code g√©n√©r√©')
                        .setImage(qrUrl)
                        .setDescription(`Contenu: ${text}`)
                        .setColor('#2ecc71');
                    await message.reply({ embeds: [embed] });
                }
                return qrUrl;
            }

            // my.password.generate - G√©n√©rateur de mot de passe s√©curis√©
            else if (line.startsWith('my.password.generate')) {
                const args = this.parseArguments(line);
                const length = parseInt(args[0]) || 12;
                const includeSymbols = args[1] !== 'false';
                const password = this.generateSecurePassword(length, includeSymbols);
                this.variables.set('generated_password', password);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.author.send(`üîê Mot de passe g√©n√©r√©: ||${password}||`);
                    await message.reply('üîê Mot de passe envoy√© en message priv√© pour votre s√©curit√©!');
                }
                return password;
            }

            // my.url.shorten - Raccourcisseur d'URL r√©el
            else if (line.startsWith('my.url.shorten')) {
                const args = this.parseArguments(line);
                const url = args[0];
                const shortUrl = await this.shortenUrl(url);
                this.variables.set('short_url', shortUrl);

                if (this.currentCommand && this.commands.has(this.currentCommand)) {
                    this.commands.get(this.currentCommand).actions.push(line);
                } else if (message) {
                    await message.reply(`üîó URL raccourcie: ${shortUrl}`);
                }
                return shortUrl;
            }

            // === NOUVELLES FONCTIONNALIT√âS V2.0 ===

            // my.qr.generate - G√©n√©rateur de QR Code
            else if (line.startsWith('my.qr.generate')) {
                const args = this.parseArguments(line);
                this.variables.set('qr_url', `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(args[0] || 'Discord.my')}`);
            }

            // my.random.quote - Citation al√©atoire
            else if (line.startsWith('my.random.quote')) {
                const quotes = [
                    "La cr√©ativit√©, c'est l'intelligence qui s'amuse. - Albert Einstein",
                    "Le succ√®s c'est d'aller d'√©chec en √©chec sans perdre son enthousiasme. - Winston Churchill",
                    "L'imagination est plus importante que le savoir. - Albert Einstein",
                    "Le meilleur moment pour planter un arbre c'√©tait il y a 20 ans. Le deuxi√®me meilleur moment c'est maintenant. - Proverbe chinois",
                    "Soyez vous-m√™me, tous les autres sont d√©j√† pris. - Oscar Wilde"
                ];
                this.variables.set('random_quote', quotes[Math.floor(Math.random() * quotes.length)]);
            }

            // my.random.joke - Blague al√©atoire
            else if (line.startsWith('my.random.joke')) {
                const jokes = [
                    "Pourquoi les plongeurs plongent-ils toujours en arri√®re et jamais en avant ? Parce que sinon, ils tombent dans le bateau !",
                    "Que dit un escargot quand il croise une limace ? \"Regarde le nudiste !\"",
                    "Qu'est-ce qui est jaune et qui attend ? Jonathan !",
                    "Comment appelle-t-on un chat tomb√© dans un pot de peinture le jour de No√´l ? Un chat-mallow !",
                    "Pourquoi les poissons n'aiment pas jouer au tennis ? Parce qu'ils ont peur du filet!"
                ];
                this.variables.set('random_joke', jokes[Math.floor(Math.random() * jokes.length)]);
            }

            // my.random.fact - Fait amusant
            else if (line.startsWith('my.random.fact')) {
                const facts = [
                    "Les pieuvres ont trois c≈ìurs et du sang bleu !",
                    "Un groupe de flamants roses s'appelle une \"flamboyance\" !",
                    "Les abeilles peuvent reconna√Ætre les visages humains !",
                    "Le miel ne se p√©rime jamais !",
                    "Les dauphins ont des noms pour s'identifier entre eux!"
                ];
                this.variables.set('random_fact', facts[Math.floor(Math.random() * facts.length)]);
            }

            // my.horoscope - Horoscope
            else if (line.startsWith('my.horoscope')) {
                const args = this.parseArguments(line);
                const predictions = [
                    "Les astres vous sourient aujourd'hui !",
                    "Une belle surprise vous attend !",
                    "Jour id√©al pour de nouveaux projets !",
                    "L'amour est dans l'air !",
                    "Votre cr√©ativit√© sera r√©compens√©e!"
                ];
                this.variables.set('horoscope', predictions[Math.floor(Math.random() * predictions.length)]);
            }

            // my.game.coinflip - Pile ou face
            else if (line.startsWith('my.game.coinflip')) {
                this.variables.set('coinflip', Math.random() < 0.5 ? 'ü™ô Face' : 'ü™ô Pile');
            }

            // my.game.rps - Pierre papier ciseaux
            else if (line.startsWith('my.game.rps')) {
                const args = this.parseArguments(line);
                const choices = ['pierre', 'papier', 'ciseaux'];
                const botChoice = choices[Math.floor(Math.random() * choices.length)];
                const userChoice = args[0]?.toLowerCase();

                let result = '';
                if (userChoice === botChoice) {
                    result = `√âgalit√© ! Nous avons tous les deux choisi ${botChoice} !`;
                } else if (
                    (userChoice === 'pierre' && botChoice === 'ciseaux') ||
                    (userChoice === 'papier' && botChoice === 'pierre') ||
                    (userChoice === 'ciseaux' && botChoice === 'papier')
                ) {
                    result = `Vous gagnez ! ${userChoice} bat ${botChoice} !`;
                } else {
                    result = `Je gagne ! ${botChoice} bat ${userChoice} !`;
                }
                this.variables.set('rps_result', result);
            }

            // my.game.8ball - Boule magique
            else if (line.startsWith('my.game.8ball')) {
                const answers = [
                    "üé± C'est certain !",
                    "üé± Sans aucun doute !",
                    "üé± Oui d√©finitivement !",
                    "üé± Vous pouvez compter dessus !",
                    "üé± Tr√®s probable !",
                    "üé± Les signes pointent vers oui !",
                    "üé± R√©ponse floue, r√©essayez !",
                    "üé± Demandez plus tard !",
                    "üé± Mieux vaut ne pas vous le dire maintenant !",
                    "üé± Peu probable !",
                    "üé± Mes sources disent non !",
                    "üé± Tr√®s douteux !"
                ];
                this.variables.set('8ball_answer', answers[Math.floor(Math.random() * answers.length)]);
            }

            // my.economy.balance - Solde √©conomique
            else if (line.startsWith('my.economy.balance')) {
                const args = this.parseArguments(line);
                const userId = args[0] || 'user';
                const balance = Math.floor(Math.random() * 1000) + 100;
                this.variables.set('user_balance', `üí∞ ${balance} Maya Coins`);
            }

            // my.economy.daily - Bonus quotidien
            else if (line.startsWith('my.economy.daily')) {
                const dailyBonus = Math.floor(Math.random() * 100) + 50;
                this.variables.set('daily_bonus', `üéÅ Vous avez re√ßu ${dailyBonus} Maya Coins !`);
            }

            // my.url.shorten - Raccourcisseur d'URL
            else if (line.startsWith('my.url.shorten')) {
                const args = this.parseArguments(line);
                const originalUrl = args[0];
                // Simulation d'un raccourcisseur d'URL
                const shortId = Math.random().toString(36).substring(2, 8);
                this.variables.set('short_url', `https://maya.ly/${shortId}`);
            }

            // my.password.generate - G√©n√©rateur de mot de passe
            else if (line.startsWith('my.password.generate')) {
                const args = this.parseArguments(line);
                const length = parseInt(args[0]) || 12;
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
                let password = '';
                for (let i = 0; i < length; i++) {
                    password += chars.charAt(Math.floor(Math.random() * chars.length));
                }
                this.variables.set('generated_password', `üîê ${password}`);
            }

            // my.base64.encode - Encodage Base64
            else if (line.startsWith('my.base64.encode')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                this.variables.set('base64_encoded', Buffer.from(text).toString('base64'));
            }

            // my.base64.decode - D√©codage Base64
            else if (line.startsWith('my.base64.decode')) {
                const args = this.parseArguments(line);
                const encoded = args[0] || '';
                try {
                    this.variables.set('base64_decoded', Buffer.from(encoded, 'base64').toString('utf8'));
                } catch (error) {
                    this.variables.set('base64_decoded', 'Erreur de d√©codage');
                }
            }

            // my.weather - Informations m√©t√©o (simulation)
            else if (line.startsWith('my.weather')) {
                const args = this.parseArguments(line);
                const city = args[0] || 'Paris';
                const temp = Math.floor(Math.random() * 30) + 5;
                const conditions = ['‚òÄÔ∏è Ensoleill√©', '‚õÖ Nuageux', 'üåßÔ∏è Pluvieux', '‚ùÑÔ∏è Neigeux', 'üå§Ô∏è Partiellement nuageux'];
                const condition = conditions[Math.floor(Math.random() * conditions.length)];
                this.variables.set('weather_info', `üå°Ô∏è ${temp}¬∞C √† ${city} - ${condition}`);
            }

            // my.translate - Traducteur (simulation)
            else if (line.startsWith('my.translate')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                const fromLang = args[1] || 'en';
                const toLang = args[2] || 'fr';

                // Traductions simples simul√©es
                const translations = {
                    'hello': 'bonjour',
                    'goodbye': 'au revoir',
                    'thank you': 'merci',
                    'yes': 'oui',
                    'no': 'non'
                };

                const translated = translations[text.toLowerCase()] || `[Traduit de ${fromLang} vers ${toLang}] ${text}`;
                this.variables.set('translated_text', translated);
            }

            // my.level.check - V√©rifier le niveau
            else if (line.startsWith('my.level.check')) {
                const args = this.parseArguments(line);
                const level = Math.floor(Math.random() * 50) + 1;
                const xp = Math.floor(Math.random() * 1000) + 100;
                this.variables.set('user_level', `üìä Niveau ${level} - ${xp} XP`);
            }

            // my.reminder.set - D√©finir un rappel
            else if (line.startsWith('my.reminder.set')) {
                const args = this.parseArguments(line);
                const user = args[0] || 'utilisateur';
                const time = args[1] || '5m';
                const reminder = args[2] || 'Rappel !';
                this.variables.set('reminder_set', `‚è∞ Rappel d√©fini pour ${user} dans ${time}: ${reminder}`);
            }

            // my.event.create - Cr√©er un √©v√©nement
            else if (line.startsWith('my.event.create')) {
                const args = this.parseArguments(line);
                const eventName = args[0] || '√âv√©nement';
                const date = args[1] || 'Bient√¥t';
                const description = args[2] || 'Description de l\'√©v√©nement';
                this.variables.set('event_created', `üìÖ √âv√©nement "${eventName}" cr√©√© pour le ${date}: ${description}`);
            }

            // === NOUVELLES FONCTIONNALIT√âS √âCONOMIE AVANC√âE ===

            // my.economy.shop - Boutique virtuelle
            else if (line.startsWith('my.economy.shop')) {
                const items = ['üéÆ Jeu Vid√©o (500 coins)', 'üçï Pizza (50 coins)', 'üé® Artwork (200 coins)', 'üéµ Musique Premium (150 coins)', '‚≠ê Badge VIP (1000 coins)'];
                this.variables.set('shop_items', items.join('\n'));
            }

            // my.economy.buy - Acheter un item
            else if (line.startsWith('my.economy.buy')) {
                const args = this.parseArguments(line);
                const item = args[0] || 'item';
                const cost = Math.floor(Math.random() * 500) + 50;
                this.variables.set('purchase_result', `üõí Vous avez achet√© ${item} pour ${cost} Maya Coins!`);
            }

            // my.economy.inventory - Inventaire utilisateur
            else if (line.startsWith('my.economy.inventory')) {
                const items = ['üéÆ Jeu Vid√©o x2', 'üçï Pizza x5', 'üé® Artwork x1', '‚≠ê Badge VIP x1'];
                this.variables.set('user_inventory', items.join('\n'));
            }

            // my.economy.trade - √âchange entre utilisateurs
            else if (line.startsWith('my.economy.trade')) {
                const args = this.parseArguments(line);
                const user = args[0] || 'utilisateur';
                const item = args[1] || 'item';
                this.variables.set('trade_offer', `üîÑ Proposition d'√©change avec ${user}: ${item}`);
            }

            // my.economy.lottery - Loterie
            else if (line.startsWith('my.economy.lottery')) {
                const numbers = Array.from({length: 6}, () => Math.floor(Math.random() * 49) + 1);
                const winnings = Math.random() < 0.1 ? Math.floor(Math.random() * 10000) + 1000 : 0;
                this.variables.set('lottery_result', `üé∞ Num√©ros: ${numbers.join('-')} | Gains: ${winnings} coins`);
            }

            // my.economy.bank - Banque virtuelle
            else if (line.startsWith('my.economy.bank')) {
                const args = this.parseArguments(line);
                const action = args[0] || 'balance';
                const amount = args[1] || '0';
                
                if (action === 'deposit') {
                    this.variables.set('bank_action', `üè¶ D√©p√¥t de ${amount} coins effectu√© avec succ√®s!`);
                } else if (action === 'withdraw') {
                    this.variables.set('bank_action', `üè¶ Retrait de ${amount} coins effectu√© avec succ√®s!`);
                } else {
                    const balance = Math.floor(Math.random() * 5000) + 500;
                    this.variables.set('bank_action', `üè¶ Solde bancaire: ${balance} coins`);
                }
            }

            // === JEUX AVANC√âS ===

            // my.game.blackjack - Blackjack
            else if (line.startsWith('my.game.blackjack')) {
                const playerCards = [Math.floor(Math.random() * 11) + 1, Math.floor(Math.random() * 11) + 1];
                const dealerCard = Math.floor(Math.random() * 11) + 1;
                const playerTotal = playerCards.reduce((a, b) => a + b, 0);
                this.variables.set('blackjack_game', `üÉè Vos cartes: ${playerCards.join(', ')} (Total: ${playerTotal})\nüé≤ Carte visible du croupier: ${dealerCard}`);
            }

            // my.game.slots - Machine √† sous
            else if (line.startsWith('my.game.slots')) {
                const symbols = ['üçí', 'üçã', 'üçä', 'üçá', '‚≠ê', 'üíé'];
                const result = [
                    symbols[Math.floor(Math.random() * symbols.length)],
                    symbols[Math.floor(Math.random() * symbols.length)],
                    symbols[Math.floor(Math.random() * symbols.length)]
                ];
                const isWin = result[0] === result[1] && result[1] === result[2];
                this.variables.set('slots_result', `üé∞ ${result.join(' | ')} ${isWin ? 'üéâ JACKPOT!' : '‚ùå Perdu!'}`);
            }

            // my.game.poker - Poker simple
            else if (line.startsWith('my.game.poker')) {
                const suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è'];
                const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
                const hand = Array.from({length: 5}, () => 
                    `${values[Math.floor(Math.random() * values.length)]}${suits[Math.floor(Math.random() * suits.length)]}`
                );
                this.variables.set('poker_hand', `üÉè Votre main: ${hand.join(' ')}`);
            }

            // my.game.quiz - Quiz interactif
            else if (line.startsWith('my.game.quiz')) {
                const questions = [
                    { q: "Quelle est la capitale de la France?", a: "Paris" },
                    { q: "Combien font 2+2?", a: "4" },
                    { q: "Quel est le plus grand oc√©an?", a: "Pacifique" },
                    { q: "En quelle ann√©e a √©t√© cr√©√© Discord?", a: "2015" }
                ];
                const quiz = questions[Math.floor(Math.random() * questions.length)];
                this.variables.set('quiz_question', quiz.q);
                this.variables.set('quiz_answer', quiz.a);
            }

            // my.game.trivia - Culture g√©n√©rale
            else if (line.startsWith('my.game.trivia')) {
                const trivias = [
                    "Les dauphins dorment avec un ≈ìil ouvert!",
                    "Une journ√©e sur V√©nus dure plus longtemps qu'une ann√©e!",
                    "Les bananes sont radioactives!",
                    "Il y a plus d'arbres sur Terre que d'√©toiles dans la Voie lact√©e!",
                    "Le c≈ìur d'une crevette est dans sa t√™te!"
                ];
                this.variables.set('trivia_fact', trivias[Math.floor(Math.random() * trivias.length)]);
            }

            // === FONCTIONNALIT√âS IA ET AUTOMATISATION ===

            // my.ai.chatbot - Chatbot simple
            else if (line.startsWith('my.ai.chatbot')) {
                const args = this.parseArguments(line);
                const input = args[0] || 'hello';
                const responses = {
                    'hello': 'Bonjour! Comment puis-je vous aider?',
                    'how are you': 'Je vais tr√®s bien, merci!',
                    'goodbye': 'Au revoir! Passez une excellente journ√©e!',
                    'help': 'Je peux vous aider avec diverses t√¢ches!'
                };
                this.variables.set('chatbot_response', responses[input.toLowerCase()] || 'Je ne comprends pas cette question.');
            }

            // my.ai.sentiment - Analyse de sentiment
            else if (line.startsWith('my.ai.sentiment')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                const positiveWords = ['super', 'g√©nial', 'excellent', 'fantastique', 'merveilleux'];
                const negativeWords = ['nul', 'horrible', 'terrible', 'affreux', 'mauvais'];
                
                let sentiment = 'neutre üòê';
                if (positiveWords.some(word => text.toLowerCase().includes(word))) {
                    sentiment = 'positif üòä';
                } else if (negativeWords.some(word => text.toLowerCase().includes(word))) {
                    sentiment = 'n√©gatif üòû';
                }
                this.variables.set('sentiment_analysis', `Sentiment d√©tect√©: ${sentiment}`);
            }

            // my.ai.autocomplete - Autocompl√©tion
            else if (line.startsWith('my.ai.autocomplete')) {
                const args = this.parseArguments(line);
                const prefix = args[0] || '';
                const suggestions = [
                    `${prefix}tion`, `${prefix}ment`, `${prefix}able`, `${prefix}ique`, `${prefix}eur`
                ];
                this.variables.set('autocomplete_suggestions', suggestions.join(', '));
            }

            // === R√âSEAUX SOCIAUX ET COMMUNAUT√â ===

            // my.social.follow - Syst√®me de suivi
            else if (line.startsWith('my.social.follow')) {
                const args = this.parseArguments(line);
                const user = args[0] || 'utilisateur';
                this.variables.set('follow_status', `‚úÖ Vous suivez maintenant ${user}!`);
            }

            // my.social.feed - Fil d'actualit√©
            else if (line.startsWith('my.social.feed')) {
                const posts = [
                    "üë§ Alice a partag√© une nouvelle photo!",
                    "üéÆ Bob joue maintenant √† Minecraft!",
                    "üéµ Charlie √©coute de la musique!",
                    "üìö Diana lit un nouveau livre!",
                    "üçï Eve mange une d√©licieuse pizza!"
                ];
                this.variables.set('social_feed', posts.join('\n'));
            }

            // my.social.like - Syst√®me de likes
            else if (line.startsWith('my.social.like')) {
                const args = this.parseArguments(line);
                const post = args[0] || 'publication';
                const likes = Math.floor(Math.random() * 100) + 1;
                this.variables.set('like_status', `‚ù§Ô∏è Vous avez aim√© ${post}! (${likes} likes au total)`);
            }

            // my.social.share - Partage de contenu
            else if (line.startsWith('my.social.share')) {
                const args = this.parseArguments(line);
                const content = args[0] || 'contenu';
                this.variables.set('share_status', `üîÑ Contenu partag√©: ${content}`);
            }

            // my.social.trending - Tendances
            else if (line.startsWith('my.social.trending')) {
                const trends = ['#DiscordMy', '#Gaming', '#Musique', '#Art', '#Programmation', '#Memes', '#Tech'];
                this.variables.set('trending_topics', trends.join(' '));
            }

            // === PRODUCTIVIT√â ET ORGANISATION ===

            // my.todo.add - Ajouter une t√¢che
            else if (line.startsWith('my.todo.add')) {
                const args = this.parseArguments(line);
                const task = args[0] || 'nouvelle t√¢che';
                this.variables.set('todo_added', `‚úÖ T√¢che ajout√©e: ${task}`);
            }

            // my.todo.list - Lister les t√¢ches
            else if (line.startsWith('my.todo.list')) {
                const tasks = [
                    "üìù Terminer le projet",
                    "üõí Faire les courses",
                    "üìö √âtudier Discord.my",
                    "üéÆ Jouer avec les amis",
                    "üíª Coder le bot"
                ];
                this.variables.set('todo_list', tasks.join('\n'));
            }

            // my.calendar.event - √âv√©nement calendrier
            else if (line.startsWith('my.calendar.event')) {
                const args = this.parseArguments(line);
                const event = args[0] || '√âv√©nement';
                const date = args[1] || 'Aujourd\'hui';
                this.variables.set('calendar_event', `üìÖ ${event} programm√© pour ${date}`);
            }

            // my.notes.create - Cr√©er une note
            else if (line.startsWith('my.notes.create')) {
                const args = this.parseArguments(line);
                const note = args[0] || 'Ma note';
                this.variables.set('note_created', `üìù Note cr√©√©e: ${note}`);
            }

            // my.timer.start - D√©marrer un minuteur
            else if (line.startsWith('my.timer.start')) {
                const args = this.parseArguments(line);
                const duration = args[0] || '5m';
                this.variables.set('timer_started', `‚è±Ô∏è Minuteur d√©marr√© pour ${duration}`);
            }

            // === DIVERTISSEMENT AVANC√â ===

            // my.entertainment.movie - Recommandation de film
            else if (line.startsWith('my.entertainment.movie')) {
                const movies = [
                    "üé¨ Inception (2010)",
                    "üé¨ The Matrix (1999)",
                    "üé¨ Interstellar (2014)",
                    "üé¨ Pulp Fiction (1994)",
                    "üé¨ The Shawshank Redemption (1994)"
                ];
                this.variables.set('movie_recommendation', movies[Math.floor(Math.random() * movies.length)]);
            }

            // my.entertainment.music - Recommandation musicale
            else if (line.startsWith('my.entertainment.music')) {
                const songs = [
                    "üéµ Bohemian Rhapsody - Queen",
                    "üéµ Hotel California - Eagles",
                    "üéµ Stairway to Heaven - Led Zeppelin",
                    "üéµ Imagine - John Lennon",
                    "üéµ Billie Jean - Michael Jackson"
                ];
                this.variables.set('music_recommendation', songs[Math.floor(Math.random() * songs.length)]);
            }

            // my.entertainment.book - Recommandation de livre
            else if (line.startsWith('my.entertainment.book')) {
                const books = [
                    "üìö 1984 - George Orwell",
                    "üìö Le Petit Prince - Antoine de Saint-Exup√©ry",
                    "üìö Harry Potter - J.K. Rowling",
                    "üìö Le Seigneur des Anneaux - J.R.R. Tolkien",
                    "üìö Dune - Frank Herbert"
                ];
                this.variables.set('book_recommendation', books[Math.floor(Math.random() * books.length)]);
            }

            // my.entertainment.podcast - Recommandation de podcast
            else if (line.startsWith('my.entertainment.podcast')) {
                const podcasts = [
                    "üéôÔ∏è Podcast Science",
                    "üéôÔ∏è 2 Heures de Perdues",
                    "üéôÔ∏è Les Regardeurs",
                    "üéôÔ∏è Transfert",
                    "üéôÔ∏è Meta de Choc"
                ];
                this.variables.set('podcast_recommendation', podcasts[Math.floor(Math.random() * podcasts.length)]);
            }

            // === S√âCURIT√â ET MOD√âRATION AVANC√âE ===

            // my.security.scan - Scanner de s√©curit√©
            else if (line.startsWith('my.security.scan')) {
                const threats = Math.floor(Math.random() * 5);
                this.variables.set('security_scan', `üîç Scan termin√©: ${threats} menace(s) d√©tect√©e(s)`);
            }

            // my.security.antispam - Anti-spam
            else if (line.startsWith('my.security.antispam')) {
                const args = this.parseArguments(line);
                const message = args[0] || '';
                const isSpam = message.length > 100 || /(.)\1{4,}/.test(message);
                this.variables.set('spam_check', isSpam ? '‚ö†Ô∏è Message d√©tect√© comme spam!' : '‚úÖ Message valide');
            }

            // my.security.verify - Syst√®me de v√©rification
            else if (line.startsWith('my.security.verify')) {
                const verificationCode = Math.floor(Math.random() * 9000) + 1000;
                this.variables.set('verification_code', `üîê Code de v√©rification: ${verificationCode}`);
            }

            // === ANALYSE ET STATISTIQUES ===

            // my.analytics.stats - Statistiques serveur
            else if (line.startsWith('my.analytics.stats')) {
                const stats = {
                    messages: Math.floor(Math.random() * 10000) + 1000,
                    active_users: Math.floor(Math.random() * 500) + 50,
                    channels: Math.floor(Math.random() * 50) + 10
                };
                this.variables.set('server_stats', `üìä Messages: ${stats.messages} | Utilisateurs actifs: ${stats.active_users} | Canaux: ${stats.channels}`);
            }

            // my.analytics.activity - Analyse d'activit√©
            else if (line.startsWith('my.analytics.activity')) {
                const hours = Array.from({length: 24}, (_, i) => `${i}h: ${Math.floor(Math.random() * 100)}`);
                this.variables.set('activity_graph', hours.slice(0, 5).join(', ') + '...');
            }

            // === INT√âGRATIONS EXTERNES ===

            // my.api.github - Int√©gration GitHub
            else if (line.startsWith('my.api.github')) {
                const args = this.parseArguments(line);
                const repo = args[0] || 'mon-repo';
                this.variables.set('github_info', `üêô Repo: ${repo} | ‚≠ê 42 stars | üç¥ 15 forks`);
            }

            // my.api.youtube - Int√©gration YouTube
            else if (line.startsWith('my.api.youtube')) {
                const args = this.parseArguments(line);
                const query = args[0] || 'discord bot';
                this.variables.set('youtube_search', `üé¨ Recherche YouTube: "${query}" - 156 r√©sultats trouv√©s`);
            }

            // my.api.twitter - Int√©gration Twitter
            else if (line.startsWith('my.api.twitter')) {
                const tweets = [
                    "üê¶ Discord.my est incroyable! #coding",
                    "üê¶ Nouveau bot cr√©√© aujourd'hui! #discord",
                    "üê¶ La programmation c'est fantastique! #dev"
                ];
                this.variables.set('latest_tweet', tweets[Math.floor(Math.random() * tweets.length)]);
            }

            // === UTILITAIRES AVANC√âS ===

            // my.utils.color - G√©n√©rateur de couleurs
            else if (line.startsWith('my.utils.color')) {
                const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57', '#FF9FF3', '#54A0FF'];
                this.variables.set('random_color', colors[Math.floor(Math.random() * colors.length)]);
            }

            // my.utils.uuid - G√©n√©rateur UUID
            else if (line.startsWith('my.utils.uuid')) {
                const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                    const r = Math.random() * 16 | 0;
                    const v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
                this.variables.set('generated_uuid', uuid);
            }

            // my.utils.hash - Hachage simple
            else if (line.startsWith('my.utils.hash')) {
                const args = this.parseArguments(line);
                const text = args[0] || 'hello';
                let hash = 0;
                for (let i = 0; i < text.length; i++) {
                    const char = text.charCodeAt(i);
                    hash = ((hash << 5) - hash) + char;
                    hash = hash & hash;
                }
                this.variables.set('text_hash', Math.abs(hash).toString(16));
            }

            // my.utils.encode - Encodage URL
            else if (line.startsWith('my.utils.encode')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                this.variables.set('encoded_url', encodeURIComponent(text));
            }

            // my.utils.decode - D√©codage URL
            else if (line.startsWith('my.utils.decode')) {
                const args = this.parseArguments(line);
                const text = args[0] || '';
                try {
                    this.variables.set('decoded_url', decodeURIComponent(text));
                } catch {
                    this.variables.set('decoded_url', 'Erreur de d√©codage');
                }
            }

            // === NOTIFICATIONS ET ALERTES ===

            // my.notification.create - Cr√©er notification
            else if (line.startsWith('my.notification.create')) {
                const args = this.parseArguments(line);
                const title = args[0] || 'Notification';
                const message = args[1] || 'Message par d√©faut';
                this.variables.set('notification', `üîî ${title}: ${message}`);
            }

            // my.alert.send - Envoyer alerte
            else if (line.startsWith('my.alert.send')) {
                const args = this.parseArguments(line);
                const type = args[0] || 'info';
                const message = args[1] || 'Alerte';
                const emoji = type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
                this.variables.set('alert_message', `${emoji} ${message}`);
            }

            // === PERSONNALISATION ===

            // my.theme.set - D√©finir th√®me
            else if (line.startsWith('my.theme.set')) {
                const args = this.parseArguments(line);
                const theme = args[0] || 'default';
                const themes = {
                    'dark': 'üåô Th√®me sombre activ√©',
                    'light': '‚òÄÔ∏è Th√®me clair activ√©',
                    'neon': '‚ú® Th√®me n√©on activ√©',
                    'retro': 'üì∫ Th√®me r√©tro activ√©'
                };
                this.variables.set('theme_status', themes[theme] || 'üé® Th√®me par d√©faut');
            }

            // my.profile.customize - Personnaliser profil
            else if (line.startsWith('my.profile.customize')) {
                const args = this.parseArguments(line);
                const element = args[0] || 'avatar';
                this.variables.set('profile_update', `‚ú® ${element} de profil mis √† jour!`);
            }

            // === MINI-JEUX CR√âATIFS ===

            // my.game.riddle - Devinettes
            else if (line.startsWith('my.game.riddle')) {
                const riddles = [
                    { q: "Je suis blanc quand je suis sale. Que suis-je?", a: "Un tableau noir" },
                    { q: "Plus on m'enl√®ve, plus je deviens grand. Que suis-je?", a: "Un trou" },
                    { q: "Je commence la nuit et termine le matin. Que suis-je?", a: "La lettre N" }
                ];
                const riddle = riddles[Math.floor(Math.random() * riddles.length)];
                this.variables.set('riddle_question', riddle.q);
                this.variables.set('riddle_answer', riddle.a);
            }

            // my.game.wordchain - Cha√Æne de mots
            else if (line.startsWith('my.game.wordchain')) {
                const args = this.parseArguments(line);
                const lastWord = args[0] || 'discord';
                const lastLetter = lastWord.slice(-1);
                const suggestions = [`${lastLetter}obot`, `${lastLetter}rogrammation`, `${lastLetter}nalogue`];
                this.variables.set('word_suggestion', suggestions[Math.floor(Math.random() * suggestions.length)]);
            }

            // my.game.memory - Jeu de m√©moire
            else if (line.startsWith('my.game.memory')) {
                const sequence = Array.from({length: 5}, () => Math.floor(Math.random() * 9) + 1);
                this.variables.set('memory_sequence', `üß† M√©morisez: ${sequence.join(' ')}`);
            }

            // === √âDUCATION ET APPRENTISSAGE ===

            // my.learn.vocabulary - Vocabulaire
            else if (line.startsWith('my.learn.vocabulary')) {
                const words = [
                    "üá´üá∑ Bonjour = üá¨üáß Hello",
                    "üá´üá∑ Merci = üá¨üáß Thank you",
                    "üá´üá∑ Au revoir = üá¨üáß Goodbye",
                    "üá´üá∑ Oui = üá¨üáß Yes",
                    "üá´üá∑ Non = üá¨üáß No"
                ];
                this.variables.set('vocab_word', words[Math.floor(Math.random() * words.length)]);
            }

            // my.learn.math - Exercices de maths
            else if (line.startsWith('my.learn.math')) {
                const a = Math.floor(Math.random() * 20) + 1;
                const b = Math.floor(Math.random() * 20) + 1;
                const operations = ['+', '-', '*'];
                const op = operations[Math.floor(Math.random() * operations.length)];
                this.variables.set('math_exercise', `üßÆ Calculez: ${a} ${op} ${b} = ?`);
            }

            // my.learn.coding - Conseils de programmation
            else if (line.startsWith('my.learn.coding')) {
                const tips = [
                    "üí° Toujours commenter votre code!",
                    "üí° Utilisez des noms de variables explicites!",
                    "üí° Testez votre code r√©guli√®rement!",
                    "üí° La pratique rend parfait!",
                    "üí° Apprenez de vos erreurs!"
                ];
                this.variables.set('coding_tip', tips[Math.floor(Math.random() * tips.length)]);
            }

            // === WELLNESS ET SANT√â ===

            // my.wellness.meditation - M√©ditation guid√©e
            else if (line.startsWith('my.wellness.meditation')) {
                const meditations = [
                    "üßò‚Äç‚ôÄÔ∏è Respirez profond√©ment pendant 5 minutes",
                    "üßò‚Äç‚ôÄÔ∏è Concentrez-vous sur votre respiration",
                    "üßò‚Äç‚ôÄÔ∏è Videz votre esprit de toute pens√©e",
                    "üßò‚Äç‚ôÄÔ∏è Imaginez un lieu paisible"
                ];
                this.variables.set('meditation_guide', meditations[Math.floor(Math.random() * meditations.length)]);
            }

            // my.wellness.exercise - Exercices
            else if (line.startsWith('my.wellness.exercise')) {
                const exercises = [
                    "üí™ 20 pompes",
                    "üí™ 30 secondes de planche",
                    "üí™ 15 squats",
                    "üí™ 10 burpees",
                    "üí™ √âtirements pendant 2 minutes"
                ];
                this.variables.set('exercise_suggestion', exercises[Math.floor(Math.random() * exercises.length)]);
            }

            // my.wellness.hydration - Rappel hydratation
            else if (line.startsWith('my.wellness.hydration')) {
                this.variables.set('hydration_reminder', 'üíß N\'oubliez pas de boire de l\'eau! Restez hydrat√©!');
            }

            // === CR√âATIVIT√â ET ART ===

            // my.art.palette - Palette de couleurs
            else if (line.startsWith('my.art.palette')) {
                const palettes = [
                    "üé® Coucher de soleil: #FF6B6B, #FFE66D, #FF8E53",
                    "üé® Oc√©an: #006BA6, #0496FF, #FFBC42",
                    "üé® For√™t: #2D5016, #68A357, #A4D17A",
                    "üé® Pastel: #FFB3C6, #C9A9DD, #A8E6CF"
                ];
                this.variables.set('color_palette', palettes[Math.floor(Math.random() * palettes.length)]);
            }

            // my.art.inspiration - Inspiration artistique
            else if (line.startsWith('my.art.inspiration')) {
                const inspirations = [
                    "üé® Dessinez votre animal pr√©f√©r√©",
                    "üé® Cr√©ez un portrait abstrait",
                    "üé® Illustrez vos √©motions",
                    "üé® Repr√©sentez votre lieu de r√™ve",
                    "üé® M√©langez r√©alisme et fantaisie"
                ];
                this.variables.set('art_inspiration', inspirations[Math.floor(Math.random() * inspirations.length)]);
            }

            // === D√âVELOPPEMENT COMMUNAUTAIRE ===

            // my.community.leaderboard - Classement communaut√©
            else if (line.startsWith('my.community.leaderboard')) {
                const leaders = [
                    "ü•á Alice - 2,450 points",
                    "ü•à Bob - 2,100 points", 
                    "ü•â Charlie - 1,890 points",
                    "4Ô∏è‚É£ Diana - 1,650 points",
                    "5Ô∏è‚É£ Eve - 1,420 points"
                ];
                this.variables.set('community_leaderboard', leaders.join('\n'));
            }

            // my.community.badge - Syst√®me de badges
            else if (line.startsWith('my.community.badge')) {
                const badges = [
                    "üèÜ Premier pas",
                    "‚≠ê Contributeur actif", 
                    "üéØ Expert",
                    "üåü L√©gende",
                    "üëë Champion"
                ];
                this.variables.set('earned_badge', badges[Math.floor(Math.random() * badges.length)]);
            }

            // my.community.achievement - Accomplissements
            else if (line.startsWith('my.community.achievement')) {
                const achievements = [
                    "üéâ Premier message envoy√©!",
                    "üî• S√©rie de 7 jours d'activit√©!",
                    "üí¨ 100 messages envoy√©s!",
                    "üë• 10 amis ajout√©s!",
                    "üéÆ Premier jeu termin√©!"
                ];
                this.variables.set('new_achievement', achievements[Math.floor(Math.random() * achievements.length)]);
            }

            // === 35 NOUVELLES FONCTIONNALIT√âS CONCR√àTES ===

            // 1. my.voice.join - Rejoindre un canal vocal (fonctionnalit√© basique)
            else if (line.startsWith('my.voice.join') && message) {
                const voiceChannel = message.member?.voice?.channel;
                if (voiceChannel) {
                    try {
                        this.variables.set('voice_status', `üîä Tentative de connexion au canal vocal: ${voiceChannel.name}`);
                        await message.reply(`üîä Tentative de connexion au canal vocal **${voiceChannel.name}** (fonctionnalit√© limit√©e)`);
                    } catch (error) {
                        await message.reply('‚ùå Impossible de rejoindre le canal vocal.');
                    }
                } else {
                    await message.reply('‚ùå Vous devez √™tre dans un canal vocal.');
                }
            }

            // 2. my.voice.leave - Quitter le canal vocal (fonctionnalit√© basique)
            else if (line.startsWith('my.voice.leave') && message) {
                this.variables.set('voice_status', 'üîá D√©connexion du canal vocal simul√©e');
                await message.reply('üîá D√©connexion du canal vocal simul√©e.');
            }

            // 3. my.automod.setup - Configuration de l'auto-mod√©ration
            else if (line.startsWith('my.automod.setup') && message) {
                const args = this.parseArguments(line);
                const feature = args[0] || 'spam';
                
                if (!this.automodConfig) {
                    this.automodConfig = {
                        antiSpam: false,
                        antiLinks: false,
                        antiCaps: false,
                        maxWarnings: 3
                    };
                }

                switch (feature) {
                    case 'spam':
                        this.automodConfig.antiSpam = true;
                        this.variables.set('automod_status', 'üõ°Ô∏è Anti-spam activ√©');
                        if (message) await message.reply('üõ°Ô∏è **Auto-mod√©ration anti-spam activ√©e**');
                        break;
                    case 'links':
                        this.automodConfig.antiLinks = true;
                        this.variables.set('automod_status', 'üîó Anti-liens activ√©');
                        if (message) await message.reply('üîó **Auto-mod√©ration anti-liens activ√©e**');
                        break;
                    case 'caps':
                        this.automodConfig.antiCaps = true;
                        this.variables.set('automod_status', 'üì¢ Anti-majuscules activ√©');
                        if (message) await message.reply('üì¢ **Auto-mod√©ration anti-majuscules activ√©e**');
                        break;
                }
            }

            // 4. my.backup.create - Cr√©er une sauvegarde du serveur
            else if (line.startsWith('my.backup.create') && message) {
                if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                    await message.reply('‚ùå Seuls les administrateurs peuvent cr√©er des sauvegardes.');
                    return;
                }

                const backupData = {
                    name: message.guild.name,
                    channels: message.guild.channels.cache.map(ch => ({ name: ch.name, type: ch.type })),
                    roles: message.guild.roles.cache.map(role => ({ name: role.name, color: role.hexColor })),
                    timestamp: new Date().toISOString()
                };

                const backupId = Math.random().toString(36).substring(2, 10);
                this.variables.set('backup_id', backupId);
                this.variables.set('backup_status', `üíæ Sauvegarde cr√©√©e: ${backupId}`);
                
                const embed = new EmbedBuilder()
                    .setTitle('üíæ Sauvegarde Cr√©√©e')
                    .setDescription(`ID de sauvegarde: \`${backupId}\`\nCanaux: ${backupData.channels.length}\nR√¥les: ${backupData.roles.length}`)
                    .setColor('#28a745')
                    .setTimestamp();
                await message.reply({ embeds: [embed] });
            }

            // 5. my.ticket.create - Syst√®me de tickets
            else if (line.startsWith('my.ticket.create') && message) {
                const args = this.parseArguments(line);
                const reason = args[0] || 'Support g√©n√©ral';
                const ticketId = `ticket-${Date.now()}`;

                try {
                    const ticketChannel = await message.guild.channels.create({
                        name: ticketId,
                        type: ChannelType.GuildText,
                        permissionOverwrites: [
                            {
                                id: message.guild.id,
                                deny: [PermissionsBitField.Flags.ViewChannel],
                            },
                            {
                                id: message.author.id,
                                allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
                            },
                        ],
                    });

                    const embed = new EmbedBuilder()
                        .setTitle('üé´ Nouveau Ticket')
                        .setDescription(`**Cr√©√© par:** ${message.author.tag}\n**Raison:** ${reason}\n**Canal:** ${ticketChannel.toString()}`)
                        .setColor('#007bff')
                        .setTimestamp();

                    await ticketChannel.send({ embeds: [embed] });
                    await message.reply(`üé´ Ticket cr√©√©: ${ticketChannel.toString()}`);
                    this.variables.set('ticket_created', `üé´ ${ticketId}`);
                } catch (error) {
                    await message.reply('‚ùå Erreur lors de la cr√©ation du ticket.');
                }
            }

            // 6. my.slowmode.set - D√©finir le mode lent
            else if (line.startsWith('my.slowmode.set') && message) {
                const args = this.parseArguments(line);
                const seconds = parseInt(args[0]) || 0;

                if (!message.member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
                    await message.reply('‚ùå Permissions insuffisantes.');
                    return;
                }

                try {
                    await message.channel.setRateLimitPerUser(seconds);
                    this.variables.set('slowmode_status', `‚è∞ Mode lent: ${seconds}s`);
                    if (seconds === 0) {
                        await message.reply('‚è∞ **Mode lent d√©sactiv√©**');
                    } else {
                        await message.reply(`‚è∞ **Mode lent activ√©:** ${seconds} secondes`);
                    }
                } catch (error) {
                    await message.reply('‚ùå Erreur lors de la modification du mode lent.');
                }
            }

            // 7. my.announcement.create - Cr√©er une annonce
            else if (line.startsWith('my.announcement.create') && message) {
                const args = this.parseArguments(line);
                const title = args[0] || 'Annonce';
                const content = args[1] || 'Nouvelle annonce';
                const channelName = args[2] || 'announcements';

                const announceChannel = message.guild.channels.cache.find(ch => ch.name === channelName);
                if (!announceChannel) {
                    await message.reply(`‚ùå Canal #${channelName} introuvable.`);
                    return;
                }

                const embed = new EmbedBuilder()
                    .setTitle(`üì¢ ${title}`)
                    .setDescription(content)
                    .setColor('#ffc107')
                    .setFooter({ text: `Par ${message.author.tag}` })
                    .setTimestamp();

                try {
                    const announcementMsg = await announceChannel.send({ content: '@everyone', embeds: [embed] });
                    await announcementMsg.crosspost().catch(() => {}); // Publication crois√©e si possible
                    await message.reply(`üì¢ Annonce publi√©e dans ${announceChannel.toString()}`);
                    this.variables.set('announcement_sent', `üì¢ ${title}`);
                } catch (error) {
                    await message.reply('‚ùå Erreur lors de la publication de l\'annonce.');
                }
            }

            // 8. my.giveaway.start - D√©marrer un giveaway
            else if (line.startsWith('my.giveaway.start') && message) {
                const args = this.parseArguments(line);
                const prize = args[0] || 'Prix myst√®re';
                const duration = args[1] || '1h';
                const winners = parseInt(args[2]) || 1;

                const embed = new EmbedBuilder()
                    .setTitle('üéâ GIVEAWAY!')
                    .setDescription(`**Prix:** ${prize}\n**Dur√©e:** ${duration}\n**Gagnants:** ${winners}\n\nR√©agissez avec üéâ pour participer!`)
                    .setColor('#ff1493')
                    .setFooter({ text: 'Discord.my Giveaway System' })
                    .setTimestamp();

                const giveawayMsg = await message.reply({ embeds: [embed] });
                await giveawayMsg.react('üéâ');
                this.variables.set('giveaway_active', `üéâ ${prize}`);
            }

            // 9. my.welcome.setup - Configuration des messages de bienvenue
            else if (line.startsWith('my.welcome.setup') && message) {
                const args = this.parseArguments(line);
                const channel = args[0] || 'welcome';
                const welcomeMessage = args[1] || 'Bienvenue {user} sur le serveur!';

                if (!this.welcomeConfig) {
                    this.welcomeConfig = {};
                }

                this.welcomeConfig[message.guild.id] = {
                    channel: channel,
                    message: welcomeMessage,
                    enabled: true
                };

                this.variables.set('welcome_status', `üëã Messages de bienvenue configur√©s`);
                await message.reply(`üëã **Messages de bienvenue configur√©s**\nCanal: #${channel}\nMessage: ${welcomeMessage}`);
            }

            // 10. my.leveling.enable - Syst√®me de niveaux
            else if (line.startsWith('my.leveling.enable') && message) {
                const userId = message.author.id;
                if (!this.levelingData) {
                    this.levelingData = new Map();
                }

                if (!this.levelingData.has(userId)) {
                    this.levelingData.set(userId, { xp: 0, level: 1, messages: 0 });
                }

                const userData = this.levelingData.get(userId);
                userData.messages++;
                userData.xp += Math.floor(Math.random() * 15) + 5;

                const nextLevelXp = userData.level * 100;
                if (userData.xp >= nextLevelXp) {
                    userData.level++;
                    userData.xp = 0;
                    this.variables.set('level_up', `üéä Niveau ${userData.level}!`);
                    await message.reply(`üéä **Level Up!** Vous √™tes maintenant niveau **${userData.level}**!`);
                }

                this.levelingData.set(userId, userData);
                this.variables.set('user_level', userData.level.toString());
                this.variables.set('user_xp', userData.xp.toString());
            }

            // 11. my.afk.set - Syst√®me AFK
            else if (line.startsWith('my.afk.set') && message) {
                const args = this.parseArguments(line);
                const reason = args[0] || 'AFK';

                if (!this.afkUsers) {
                    this.afkUsers = new Map();
                }

                this.afkUsers.set(message.author.id, {
                    reason: reason,
                    timestamp: Date.now()
                });

                try {
                    await message.member.setNickname(`[AFK] ${message.member.displayName}`);
                } catch (error) {
                    console.log('Impossible de changer le pseudo');
                }

                this.variables.set('afk_status', `üò¥ AFK: ${reason}`);
                await message.reply(`üò¥ **Vous √™tes maintenant AFK:** ${reason}`);
            }

            // 12. my.statistics.server - Statistiques d√©taill√©es du serveur
            else if (line.startsWith('my.statistics.server') && message) {
                const guild = message.guild;
                const onlineMembers = guild.members.cache.filter(member => member.presence?.status !== 'offline').size;
                const textChannels = guild.channels.cache.filter(ch => ch.type === ChannelType.GuildText).size;
                const voiceChannels = guild.channels.cache.filter(ch => ch.type === ChannelType.GuildVoice).size;
                const boostLevel = guild.premiumTier;
                const boosts = guild.premiumSubscriptionCount || 0;

                const embed = new EmbedBuilder()
                    .setTitle(`üìä Statistiques de ${guild.name}`)
                    .addFields(
                        { name: 'üë• Membres', value: `${guild.memberCount}`, inline: true },
                        { name: 'üü¢ En ligne', value: `${onlineMembers}`, inline: true },
                        { name: 'üí¨ Canaux texte', value: `${textChannels}`, inline: true },
                        { name: 'üîä Canaux vocaux', value: `${voiceChannels}`, inline: true },
                        { name: 'üé≠ R√¥les', value: `${guild.roles.cache.size}`, inline: true },
                        { name: 'üòä Emojis', value: `${guild.emojis.cache.size}`, inline: true },
                        { name: 'üöÄ Niveau de boost', value: `${boostLevel}`, inline: true },
                        { name: '‚≠ê Boosts', value: `${boosts}`, inline: true },
                        { name: 'üìÖ Cr√©√© le', value: guild.createdAt.toLocaleDateString('fr-FR'), inline: true }
                    )
                    .setThumbnail(guild.iconURL())
                    .setColor('#007bff')
                    .setTimestamp();

                await message.reply({ embeds: [embed] });
                this.variables.set('server_stats_generated', 'üìä Statistiques g√©n√©r√©es');
            }

            // 13. my.color.role - R√¥les de couleur
            else if (line.startsWith('my.color.role') && message) {
                const args = this.parseArguments(line);
                const color = args[0] || '#ffffff';
                const roleName = `Couleur-${color}`;

                try {
                    let colorRole = message.guild.roles.cache.find(role => role.name === roleName);
                    
                    if (!colorRole) {
                        colorRole = await message.guild.roles.create({
                            name: roleName,
                            color: color,
                            reason: 'R√¥le de couleur personnalis√©'
                        });
                    }

                    await message.member.roles.add(colorRole);
                    await message.reply(`üé® **R√¥le de couleur appliqu√©:** ${color}`);
                    this.variables.set('color_role_applied', `üé® ${color}`);
                } catch (error) {
                    await message.reply('‚ùå Erreur lors de l\'application du r√¥le de couleur.');
                }
            }

            // 14. my.embed.builder - Constructeur d'embed interactif
            else if (line.startsWith('my.embed.builder') && message) {
                const args = this.parseArguments(line);
                const title = args[0] || 'Embed personnalis√©';
                const description = args[1] || 'Description';
                const color = args[2] || '#0099ff';
                const imageUrl = args[3] || null;

                const customEmbed = new EmbedBuilder()
                    .setTitle(title)
                    .setDescription(description)
                    .setColor(color)
                    .setFooter({ text: `Cr√©√© par ${message.author.tag}` })
                    .setTimestamp();

                if (imageUrl) {
                    customEmbed.setImage(imageUrl);
                }

                await message.reply({ embeds: [customEmbed] });
                this.variables.set('custom_embed_created', 'üìã Embed personnalis√© cr√©√©');
            }

            // 15. my.reaction.role - R√¥les par r√©action
            else if (line.startsWith('my.reaction.role') && message) {
                const args = this.parseArguments(line);
                const emoji = args[0] || 'üé≠';
                const roleName = args[1] || 'Membre';

                const role = message.guild.roles.cache.find(r => r.name === roleName);
                if (!role) {
                    await message.reply(`‚ùå R√¥le "${roleName}" introuvable.`);
                    return;
                }

                const embed = new EmbedBuilder()
                    .setTitle('üé≠ R√¥les par R√©action')
                    .setDescription(`R√©agissez avec ${emoji} pour obtenir le r√¥le **${roleName}**`)
                    .setColor('#9b59b6');

                const reactionMsg = await message.reply({ embeds: [embed] });
                await reactionMsg.react(emoji);

                // Stocker la configuration pour la gestion des r√©actions
                if (!this.reactionRoles) {
                    this.reactionRoles = new Map();
                }
                this.reactionRoles.set(`${reactionMsg.id}_${emoji}`, role.id);
                this.variables.set('reaction_role_setup', `üé≠ ${emoji} ‚Üí ${roleName}`);
            }

            // 16. my.music.play - Jouer de la musique (simulation)
            else if (line.startsWith('my.music.play') && message) {
                const args = this.parseArguments(line);
                const query = args[0] || 'musique al√©atoire';

                if (!message.member.voice.channel) {
                    await message.reply('‚ùå Vous devez √™tre dans un canal vocal.');
                    return;
                }

                const embed = new EmbedBuilder()
                    .setTitle('üéµ Lecture en cours')
                    .setDescription(`**Piste:** ${query}\n**Demand√© par:** ${message.author.tag}`)
                    .setColor('#1db954')
                    .setTimestamp();

                await message.reply({ embeds: [embed] });
                this.variables.set('music_playing', `üéµ ${query}`);
            }

            // 17. my.temp.channel - Canaux temporaires
            else if (line.startsWith('my.temp.channel') && message) {
                const args = this.parseArguments(line);
                const duration = args[0] || '1h';
                const channelName = args[1] || `temp-${Date.now()}`;

                try {
                    const tempChannel = await message.guild.channels.create({
                        name: channelName,
                        type: ChannelType.GuildText,
                        reason: 'Canal temporaire'
                    });

                    await message.reply(`‚è∞ **Canal temporaire cr√©√©:** ${tempChannel.toString()} (dur√©e: ${duration})`);
                    this.variables.set('temp_channel_created', `‚è∞ ${channelName}`);

                    // Programmer la suppression (simulation)
                    setTimeout(async () => {
                        try {
                            await tempChannel.delete('Canal temporaire expir√©');
                        } catch (error) {
                            console.log('Canal d√©j√† supprim√©');
                        }
                    }, 3600000); // 1 heure
                } catch (error) {
                    await message.reply('‚ùå Erreur lors de la cr√©ation du canal temporaire.');
                }
            }

            // 18. my.crypto.price - Prix des cryptomonnaies
            else if (line.startsWith('my.crypto.price')) {
                const args = this.parseArguments(line);
                const crypto = args[0] || 'bitcoin';
                const price = (Math.random() * 50000 + 10000).toFixed(2);
                const change = ((Math.random() - 0.5) * 20).toFixed(2);
                const changeColor = parseFloat(change) >= 0 ? 'üü¢' : 'üî¥';

                this.variables.set('crypto_price', `üí∞ ${crypto.toUpperCase()}: $${price} ${changeColor} ${change}%`);

                if (message) {
                    const embed = new EmbedBuilder()
                        .setTitle(`üí∞ Prix de ${crypto.toUpperCase()}`)
                        .setDescription(`**Prix actuel:** $${price}\n**Variation 24h:** ${changeColor} ${change}%`)
                        .setColor(parseFloat(change) >= 0 ? '#00ff00' : '#ff0000')
                        .setTimestamp();
                    await message.reply({ embeds: [embed] });
                }
            }

            // 19. my.meme.generate - G√©n√©rateur de m√®mes
            else if (line.startsWith('my.meme.generate')) {
                const memeTemplates = [
                    'https://i.imgflip.com/1bij.jpg', // Distracted Boyfriend
                    'https://i.imgflip.com/30b1gx.jpg', // Drake
                    'https://i.imgflip.com/1g8my4.jpg', // Expanding Brain
                    'https://i.imgflip.com/26am.jpg', // Surprised Pikachu
                    'https://i.imgflip.com/1otk96.jpg' // Distracted Boyfriend
                ];

                const randomMeme = memeTemplates[Math.floor(Math.random() * memeTemplates.length)];
                this.variables.set('generated_meme', randomMeme);

                if (message) {
                    const embed = new EmbedBuilder()
                        .setTitle('üòÇ M√®me G√©n√©r√©')
                        .setImage(randomMeme)
                        .setColor('#ff6b6b');
                    await message.reply({ embeds: [embed] });
                }
            }

            // 20. my.quiz.start - Quiz interactif
            else if (line.startsWith('my.quiz.start') && message) {
                const questions = [
                    { q: 'Quelle est la capitale de la France?', answers: ['Paris', 'Lyon', 'Marseille', 'Toulouse'], correct: 0 },
                    { q: 'Combien font 2+2?', answers: ['3', '4', '5', '6'], correct: 1 },
                    { q: 'Qui a cr√©√© Discord?', answers: ['Jason Citron', 'Mark Zuckerberg', 'Elon Musk', 'Bill Gates'], correct: 0 }
                ];

                const randomQ = questions[Math.floor(Math.random() * questions.length)];
                const embed = new EmbedBuilder()
                    .setTitle('üß† Quiz Time!')
                    .setDescription(`**Question:** ${randomQ.q}\n\n${randomQ.answers.map((a, i) => `${i + 1}Ô∏è‚É£ ${a}`).join('\n')}`)
                    .setColor('#6f42c1')
                    .setFooter({ text: 'R√©agissez avec le bon num√©ro!' });

                const quizMsg = await message.reply({ embeds: [embed] });
                for (let i = 0; i < randomQ.answers.length; i++) {
                    await quizMsg.react(`${i + 1}Ô∏è‚É£`);
                }

                this.variables.set('quiz_active', 'üß† Quiz en cours');
            }

            // 21. my.suggestion.create - Syst√®me de suggestions
            else if (line.startsWith('my.suggestion.create') && message) {
                const args = this.parseArguments(line);
                const suggestion = args[0] || 'Suggestion anonyme';

                const embed = new EmbedBuilder()
                    .setTitle('üí° Nouvelle Suggestion')
                    .setDescription(suggestion)
                    .setFooter({ text: `Sugg√©r√© par ${message.author.tag}` })
                    .setColor('#ffc107')
                    .setTimestamp();

                const suggestionMsg = await message.reply({ embeds: [embed] });
                await suggestionMsg.react('üëç');
                await suggestionMsg.react('üëé');
                await suggestionMsg.react('ü§∑');

                this.variables.set('suggestion_created', 'üí° Suggestion cr√©√©e');
            }

            // 22. my.server.boost - Informations de boost
            else if (line.startsWith('my.server.boost') && message) {
                const guild = message.guild;
                const boostCount = guild.premiumSubscriptionCount || 0;
                const boostTier = guild.premiumTier;
                const boosters = guild.members.cache.filter(member => member.premiumSince).size;

                const embed = new EmbedBuilder()
                    .setTitle('üöÄ Statut de Boost du Serveur')
                    .addFields(
                        { name: '‚≠ê Niveau de Boost', value: `${boostTier}/3`, inline: true },
                        { name: 'üöÄ Nombre de Boosts', value: `${boostCount}`, inline: true },
                        { name: 'üëë Boosters', value: `${boosters}`, inline: true }
                    )
                    .setColor('#f47fff')
                    .setThumbnail(guild.iconURL());

                await message.reply({ embeds: [embed] });
                this.variables.set('boost_info', `üöÄ Niveau ${boostTier} - ${boostCount} boosts`);
            }

            // 23. my.weather.alert - Alertes m√©t√©o
            else if (line.startsWith('my.weather.alert')) {
                const args = this.parseArguments(line);
                const city = args[0] || 'Paris';
                const alertTypes = ['üåßÔ∏è Pluie forte', '‚ùÑÔ∏è Neige', '‚õàÔ∏è Orage', 'üå™Ô∏è Vent violent', '‚òÄÔ∏è Canicule'];
                const randomAlert = alertTypes[Math.floor(Math.random() * alertTypes.length)];

                this.variables.set('weather_alert', `‚ö†Ô∏è ${city}: ${randomAlert}`);

                if (message) {
                    const embed = new EmbedBuilder()
                        .setTitle('‚ö†Ô∏è Alerte M√©t√©o')
                        .setDescription(`**Ville:** ${city}\n**Alerte:** ${randomAlert}`)
                        .setColor('#ff4757')
                        .setTimestamp();
                    await message.reply({ embeds: [embed] });
                }
            }

            // 24. my.birthday.add - Syst√®me d'anniversaires
            else if (line.startsWith('my.birthday.add') && message) {
                const args = this.parseArguments(line);
                const date = args[0] || '01/01';
                const userId = message.author.id;

                if (!this.birthdayData) {
                    this.birthdayData = new Map();
                }

                this.birthdayData.set(userId, {
                    date: date,
                    username: message.author.username
                });

                this.variables.set('birthday_added', `üéÇ Anniversaire ajout√©: ${date}`);
                await message.reply(`üéÇ **Anniversaire ajout√©:** ${date}`);
            }

            // 25. my.server.member.count - Compteur de membres en temps r√©el
            else if (line.startsWith('my.server.member.count') && message) {
                const guild = message.guild;
                const totalMembers = guild.memberCount;
                const onlineMembers = guild.members.cache.filter(member => 
                    member.presence?.status === 'online' || 
                    member.presence?.status === 'idle' || 
                    member.presence?.status === 'dnd'
                ).size;
                const bots = guild.members.cache.filter(member => member.user.bot).size;
                const humans = totalMembers - bots;

                try {
                    // Cr√©er ou mettre √† jour un canal de comptage
                    let countChannel = guild.channels.cache.find(ch => ch.name.startsWith('Membres:'));
                    if (countChannel) {
                        await countChannel.setName(`Membres: ${totalMembers}`);
                    } else {
                        await guild.channels.create({
                            name: `Membres: ${totalMembers}`,
                            type: ChannelType.GuildVoice,
                            permissionOverwrites: [{
                                id: guild.id,
                                deny: [PermissionsBitField.Flags.Connect]
                            }]
                        });
                    }

                    this.variables.set('member_counter_updated', `üë• ${totalMembers} membres`);
                    await message.reply(`üë• **Compteur de membres mis √† jour:** ${totalMembers} total (${humans} humains, ${bots} bots, ${onlineMembers} en ligne)`);
                } catch (error) {
                    await message.reply('‚ùå Erreur lors de la mise √† jour du compteur de membres.');
                }
            }

            // 26. my.role.shop - Boutique de r√¥les
            else if (line.startsWith('my.role.shop') && message) {
                const availableRoles = [
                    { name: 'üé® Artiste', price: 100 },
                    { name: 'üéÆ Gamer', price: 150 },
                    { name: 'üéµ Musicien', price: 200 },
                    { name: 'üìö Lecteur', price: 75 },
                    { name: 'üíª D√©veloppeur', price: 300 }
                ];

                const roleList = availableRoles.map(role => `${role.name} - ${role.price} coins`).join('\n');
                
                const embed = new EmbedBuilder()
                    .setTitle('üõí Boutique de R√¥les')
                    .setDescription(roleList)
                    .setFooter({ text: 'Utilisez !buy-role <nom> pour acheter' })
                    .setColor('#e67e22');

                await message.reply({ embeds: [embed] });
                this.variables.set('role_shop_displayed', 'üõí Boutique affich√©e');
            }

            // 27. my.custom.command - Commandes personnalis√©es
            else if (line.startsWith('my.custom.command') && message) {
                const args = this.parseArguments(line);
                const commandName = args[0];
                const response = args[1];

                if (!commandName || !response) {
                    await message.reply('‚ùå Usage: my.custom.command("nom", "r√©ponse")');
                    return;
                }

                if (!this.customCommands) {
                    this.customCommands = new Map();
                }

                this.customCommands.set(commandName, {
                    response: response,
                    author: message.author.id,
                    created: Date.now()
                });

                this.variables.set('custom_command_created', `‚öôÔ∏è ${commandName}`);
                await message.reply(`‚öôÔ∏è **Commande personnalis√©e cr√©√©e:** !${commandName}`);
            }

            // 28. my.server.info.extended - Informations serveur √©tendues
            else if (line.startsWith('my.server.info.extended') && message) {
                const guild = message.guild;
                const owner = await guild.fetchOwner();
                const createdDays = Math.floor((Date.now() - guild.createdTimestamp) / (1000 * 60 * 60 * 24));

                const embed = new EmbedBuilder()
                    .setTitle(`üìä ${guild.name} - Informations Compl√®tes`)
                    .addFields(
                        { name: 'üëë Propri√©taire', value: owner.user.tag, inline: true },
                        { name: 'üÜî ID du Serveur', value: guild.id, inline: true },
                        { name: 'üìÖ Cr√©√© il y a', value: `${createdDays} jours`, inline: true },
                        { name: 'üåç R√©gion', value: 'Auto', inline: true },
                        { name: 'üîí Niveau de V√©rification', value: `${guild.verificationLevel}`, inline: true },
                        { name: 'üí¨ Canaux Totaux', value: `${guild.channels.cache.size}`, inline: true }
                    )
                    .setThumbnail(guild.iconURL({ size: 256 }))
                    .setColor('#5865f2');

                if (guild.banner) {
                    embed.setImage(guild.bannerURL({ size: 512 }));
                }

                await message.reply({ embeds: [embed] });
                this.variables.set('extended_info_shown', 'üìä Infos √©tendues');
            }

            // 29. my.nickname.random - Pseudo al√©atoire
            else if (line.startsWith('my.nickname.random') && message) {
                const adjectives = ['Cool', 'Super', 'Mega', 'Ultra', 'Epic', 'Awesome', 'Amazing', 'Fantastic'];
                const nouns = ['Gamer', 'Player', 'Master', 'Hero', 'Legend', 'Champion', 'Warrior', 'Knight'];
                
                const randomAdj = adjectives[Math.floor(Math.random() * adjectives.length)];
                const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];
                const randomNumber = Math.floor(Math.random() * 999) + 1;
                const newNickname = `${randomAdj}${randomNoun}${randomNumber}`;

                try {
                    await message.member.setNickname(newNickname);
                    this.variables.set('random_nickname', newNickname);
                    await message.reply(`üé≤ **Nouveau pseudo:** ${newNickname}`);
                } catch (error) {
                    await message.reply('‚ùå Impossible de changer le pseudo.');
                }
            }

            // 30. my.message.pin - √âpingler des messages importants
            else if (line.startsWith('my.message.pin') && message) {
                if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
                    await message.reply('‚ùå Permissions insuffisantes pour √©pingler des messages.');
                    return;
                }

                try {
                    await message.pin();
                    this.variables.set('message_pinned', 'üìå Message √©pingl√©');
                    await message.reply('üìå **Message √©pingl√© avec succ√®s!**');
                } catch (error) {
                    await message.reply('‚ùå Erreur lors de l\'√©pinglage du message.');
                }
            }

            // 31. my.server.activity - Activit√© du serveur
            else if (line.startsWith('my.server.activity') && message) {
                const guild = message.guild;
                const now = Date.now();
                const oneDayAgo = now - (24 * 60 * 60 * 1000);
                
                // Simulation de donn√©es d'activit√©
                const messagesCount = Math.floor(Math.random() * 1000) + 100;
                const activeUsers = Math.floor(Math.random() * 50) + 10;
                const newMembers = Math.floor(Math.random() * 5) + 1;

                const embed = new EmbedBuilder()
                    .setTitle('üìà Activit√© du Serveur (24h)')
                    .addFields(
                        { name: 'üí¨ Messages', value: `${messagesCount}`, inline: true },
                        { name: 'üë• Utilisateurs Actifs', value: `${activeUsers}`, inline: true },
                        { name: 'üÜï Nouveaux Membres', value: `${newMembers}`, inline: true }
                    )
                    .setColor('#28a745')
                    .setTimestamp();

                await message.reply({ embeds: [embed] });
                this.variables.set('activity_report', `üìà ${messagesCount} messages`);
            }

            // 32. my.reminder.list - Liste des rappels
            else if (line.startsWith('my.reminder.list') && message) {
                const userId = message.author.id;
                const userReminders = [];
                
                if (this.reminders) {
                    for (const [id, reminder] of this.reminders.entries()) {
                        if (reminder.userId === userId) {
                            const timeLeft = reminder.time - Date.now();
                            if (timeLeft > 0) {
                                const minutes = Math.ceil(timeLeft / (1000 * 60));
                                userReminders.push(`**ID:** ${id.slice(-4)} - **Dans ${minutes}min:** ${reminder.text}`);
                            }
                        }
                    }
                }

                const embed = new EmbedBuilder()
                    .setTitle('‚è∞ Vos Rappels Actifs')
                    .setDescription(userReminders.length > 0 ? userReminders.join('\n') : 'Aucun rappel actif')
                    .setColor('#17a2b8');

                await message.reply({ embeds: [embed] });
                this.variables.set('reminders_listed', `‚è∞ ${userReminders.length} rappels`);
            }

            // 33. my.emoji.steal - Voler des emojis
            else if (line.startsWith('my.emoji.steal') && message) {
                const args = this.parseArguments(line);
                const emojiUrl = args[0];
                const emojiName = args[1] || 'stolen_emoji';

                if (!message.member.permissions.has(PermissionsBitField.Flags.ManageEmojisAndStickers)) {
                    await message.reply('‚ùå Permissions insuffisantes pour g√©rer les emojis.');
                    return;
                }

                try {
                    const emoji = await message.guild.emojis.create({
                        attachment: emojiUrl,
                        name: emojiName,
                        reason: `Emoji ajout√© par ${message.author.tag}`
                    });

                    this.variables.set('emoji_stolen', `üòà ${emoji.toString()}`);
                    await message.reply(`üòà **Emoji vol√© avec succ√®s:** ${emoji.toString()}`);
                } catch (error) {
                    await message.reply('‚ùå Erreur lors de l\'ajout de l\'emoji.');
                }
            }

            // 34. my.server.template - Cr√©er un template de serveur
            else if (line.startsWith('my.server.template') && message) {
                const args = this.parseArguments(line);
                const templateName = args[0] || 'Mon Template';
                const description = args[1] || 'Template cr√©√© avec Discord.my';

                if (!message.member.permissions.has(PermissionsBitField.Flags.ManageGuild)) {
                    await message.reply('‚ùå Permissions insuffisantes pour cr√©er un template.');
                    return;
                }

                try {
                    const template = await message.guild.createTemplate(templateName, description);
                    this.variables.set('template_created', `üìã ${template.code}`);
                    
                    const embed = new EmbedBuilder()
                        .setTitle('üìã Template de Serveur Cr√©√©')
                        .setDescription(`**Nom:** ${templateName}\n**Code:** \`${template.code}\`\n**URL:** https://discord.new/${template.code}`)
                        .setColor('#5865f2');

                    await message.reply({ embeds: [embed] });
                } catch (error) {
                    await message.reply('‚ùå Erreur lors de la cr√©ation du template.');
                }
            }

            // 35. my.confession.anonymous - Confessions anonymes
            else if (line.startsWith('my.confession.anonymous') && message) {
                const args = this.parseArguments(line);
                const confession = args[0] || 'Confession anonyme';
                const confessionChannel = args[1] || 'confessions';

                const targetChannel = message.guild.channels.cache.find(ch => ch.name === confessionChannel);
                if (!targetChannel) {
                    await message.reply(`‚ùå Canal #${confessionChannel} introuvable.`);
                    return;
                }

                try {
                    await message.delete().catch(() => {}); // Supprimer le message original pour l'anonymat
                    
                    const confessionId = Math.random().toString(36).substring(2, 8).toUpperCase();
                    const embed = new EmbedBuilder()
                        .setTitle('ü§ê Confession Anonyme')
                        .setDescription(confession)
                        .setFooter({ text: `ID: ${confessionId}` })
                        .setColor('#6a0dad')
                        .setTimestamp();

                    await targetChannel.send({ embeds: [embed] });
                    this.variables.set('confession_sent', `ü§ê ${confessionId}`);
                    
                    // Confirmation en MP
                    try {
                        await message.author.send(`‚úÖ **Confession envoy√©e anonymement** (ID: ${confessionId})`);
                    } catch (error) {
                        console.log('Impossible d\'envoyer le message de confirmation en MP');
                    }
                } catch (error) {
                    console.error('Erreur lors de l\'envoi de la confession:', error);
                }
            }

            // === FONCTIONNALIT√â PERROQUET ===

            // my.discord.parrot.enable - Activer le mode perroquet
            else if (line.startsWith('my.discord.parrot.enable')) {
                const args = this.parseArguments(line);
                const channels = args.length > 0 ? args : ['all'];
                this.parrotConfig = {
                    enabled: true,
                    channels: channels,
                    excludeCommands: true,
                    excludeBots: true,
                    delay: 0,
                    prefix: '',
                    suffix: '',
                    blacklist: [],
                    whitelist: []
                };
                console.log(`ü¶ú Mode Perroquet activ√© pour les canaux: ${channels.join(', ')}`);
            }

            // my.discord.parrot.disable - D√©sactiver le mode perroquet
            else if (line.startsWith('my.discord.parrot.disable')) {
                this.parrotConfig = { enabled: false };
                console.log('ü¶ú Mode Perroquet d√©sactiv√©');
            }

            // my.discord.parrot.config - Configuration avanc√©e du perroquet
            else if (line.startsWith('my.discord.parrot.config')) {
                const args = this.parseArguments(line);
                if (args.length >= 2) {
                    const setting = args[0];
                    const value = args[1];
                    
                    if (!this.parrotConfig) {
                        this.parrotConfig = { enabled: false, channels: ['all'], excludeCommands: true, excludeBots: true, delay: 0 };
                    }
                    
                    switch (setting) {
                        case 'exclude_commands':
                            this.parrotConfig.excludeCommands = value === 'true';
                            break;
                        case 'exclude_bots':
                            this.parrotConfig.excludeBots = value === 'true';
                            break;
                        case 'delay':
                            this.parrotConfig.delay = parseInt(value) || 0;
                            break;
                        case 'channels':
                            this.parrotConfig.channels = value.split(',').map(c => c.trim());
                            break;
                    }
                    console.log(`ü¶ú Configuration Perroquet mise √† jour: ${setting} = ${value}`);
                }
            }

            // my.discord.parrot.prefix - Ajouter un pr√©fixe aux messages r√©p√©t√©s
            else if (line.startsWith('my.discord.parrot.prefix')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    if (!this.parrotConfig) {
                        this.parrotConfig = { enabled: false, channels: ['all'], excludeCommands: true, excludeBots: true, delay: 0 };
                    }
                    this.parrotConfig.prefix = args[0];
                    console.log(`ü¶ú Pr√©fixe Perroquet d√©fini: ${args[0]}`);
                }
            }

            // my.discord.parrot.suffix - Ajouter un suffixe aux messages r√©p√©t√©s
            else if (line.startsWith('my.discord.parrot.suffix')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    if (!this.parrotConfig) {
                        this.parrotConfig = { enabled: false, channels: ['all'], excludeCommands: true, excludeBots: true, delay: 0 };
                    }
                    this.parrotConfig.suffix = args[0];
                    console.log(`ü¶ú Suffixe Perroquet d√©fini: ${args[0]}`);
                }
            }

            // my.discord.parrot.filter - Filtrer certains mots ou expressions
            else if (line.startsWith('my.discord.parrot.filter')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    if (!this.parrotConfig) {
                        this.parrotConfig = { enabled: false, channels: ['all'], excludeCommands: true, excludeBots: true, delay: 0 };
                    }
                    this.parrotConfig.blacklist = args;
                    console.log(`ü¶ú Filtre Perroquet d√©fini: ${args.join(', ')}`);
                }
            }

            // my.discord.parrot.only - Ne r√©p√©ter que certains mots ou expressions
            else if (line.startsWith('my.discord.parrot.only')) {
                const args = this.parseArguments(line);
                if (args.length > 0) {
                    if (!this.parrotConfig) {
                        this.parrotConfig = { enabled: false, channels: ['all'], excludeCommands: true, excludeBots: true, delay: 0 };
                    }
                    this.parrotConfig.whitelist = args;
                    console.log(`ü¶ú Liste blanche Perroquet d√©finie: ${args.join(', ')}`);
                }
            }

            console.log(`üí¨ ${line}`);

        } catch (error) {
            console.error(`‚ùå Erreur lors de l'interpr√©tation de la ligne "${line}":`, error.message);
        }
    }

    // === VRAIES APIS ET FONCTIONS ===

    // API m√©t√©o r√©elle
    async getRealWeather(city) {
        try {
            // S'assurer que fetch est initialis√©
            if (!fetch) {
                const nodeFetch = await import('node-fetch');
                fetch = nodeFetch.default;
            }
            const apiKey = process.env.WEATHER_API_KEY || 'demo_key';
            const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=fr`);

            if (!response.ok) {
                return `‚ùå Impossible d'obtenir la m√©t√©o pour ${city}`;
            }

            const data = await response.json();
            const temp = Math.round(data.main.temp);
            const description = data.weather[0].description;
            const humidity = data.main.humidity;
            const windSpeed = data.wind.speed;

            return `üå°Ô∏è ${temp}¬∞C √† ${city}\nüå§Ô∏è ${description}\nüíß Humidit√©: ${humidity}%\nüí® Vent: ${windSpeed} m/s`;
        } catch (error) {
            return `‚ùå Erreur API m√©t√©o: ${error.message}`;
        }
    }

    // Images al√©atoires avec vraies APIs
    async getRealRandomImage(category) {
        try {
            // S'assurer que fetch est initialis√©
            if (!fetch) {
                const nodeFetch = await import('node-fetch');
                fetch = nodeFetch.default;
            }
            switch (category.toLowerCase()) {
                case 'cats':
                    const catResponse = await fetch('https://api.thecatapi.com/v1/images/search');
                    const catData = await catResponse.json();
                    return catData[0]?.url || 'https://placekitten.com/400/300';

                case 'dogs':
                    const dogResponse = await fetch('https://dog.ceo/api/breeds/image/random');
                    const dogData = await dogResponse.json();
                    return dogData.message || 'https://place-puppy.com/400x300';

                case 'foxes':
                    const foxResponse = await fetch('https://randomfox.ca/floof/');
                    const foxData = await foxResponse.json();
                    return foxData.image || 'https://via.placeholder.com/400x300?text=Fox';

                default:
                    return `https://picsum.photos/400/300?random=${Date.now()}`;
            }
        } catch (error) {
            console.error('Erreur API image:', error);
            return 'https://via.placeholder.com/400x300?text=Error+loading+image';
        }
    }

    // Traduction r√©elle (utilise une API gratuite ou LibreTranslate)
    async realTranslate(text, fromLang, toLang) {
        try {
            // S'assurer que fetch est initialis√©
            if (!fetch) {
                const nodeFetch = await import('node-fetch');
                fetch = nodeFetch.default;
            }
            // Utilisation d'une API de traduction gratuite
            const response = await fetch('https://api.mymemory.translated.net/get', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
            });

            // Alternative avec LibreTranslate si disponible
            const url = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=${fromLang}|${toLang}`;
            const translateResponse = await fetch(url);
            const data = await translateResponse.json();

            return data.responseData?.translatedText || `[Traduction ${fromLang}‚Üí${toLang}] ${text}`;
        } catch (error) {
            return `‚ùå Erreur de traduction: ${error.message}`;
        }
    }

    // Syst√®me √©conomie r√©el avec persistance
    getEconomyBalance(userId) {
        if (!this.economy.has(userId)) {
            this.economy.set(userId, {
                balance: 100,
                lastDaily: 0,
                inventory: [],
                level: 1,
                xp: 0
            });
        }
        return this.economy.get(userId).balance;
    }

    claimDailyBonus(userId) {
        const user = this.economy.get(userId) || {
            balance: 100,
            lastDaily: 0,
            inventory: [],
            level: 1,
            xp: 0
        };

        const now = Date.now();
        const oneDayMs = 24 * 60 * 60 * 1000;

        if (now - user.lastDaily < oneDayMs) {
            const timeLeft = oneDayMs - (now - user.lastDaily);
            const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
            return `‚è∞ Bonus quotidien d√©j√† r√©cup√©r√©! Revenez dans ${hoursLeft}h`;
        }

        const bonus = Math.floor(Math.random() * 100) + 50;
        user.balance += bonus;
        user.lastDaily = now;
        user.xp += 10;

        this.economy.set(userId, user);
        return `üéÅ Bonus quotidien: +${bonus} Maya Coins! (Total: ${user.balance})`;
    }

    getShopItems() {
        return `üõí **Boutique Maya**

üéÆ **Jeu Premium** - 500 coins
üçï **Pizza Virtuelle** - 50 coins  
üé® **Kit Artistique** - 200 coins
üéµ **Musique Premium** - 150 coins
‚≠ê **Badge VIP** - 1000 coins
üöó **Voiture de Sport** - 2500 coins
üè† **Maison Virtuelle** - 5000 coins

Utilisez \`!buy <nom>\` pour acheter!`;
    }

    buyItem(userId, itemName) {
        const user = this.economy.get(userId) || { balance: 100, inventory: [] };

        const items = {
            'jeu': { name: 'Jeu Premium', price: 500, emoji: 'üéÆ' },
            'pizza': { name: 'Pizza Virtuelle', price: 50, emoji: 'üçï' },
            'art': { name: 'Kit Artistique', price: 200, emoji: 'üé®' },
            'musique': { name: 'Musique Premium', price: 150, emoji: 'üéµ' },
            'vip': { name: 'Badge VIP', price: 1000, emoji: '‚≠ê' },
            'voiture': { name: 'Voiture de Sport', price: 2500, emoji: 'üöó' },
            'maison': { name: 'Maison Virtuelle', price: 5000, emoji: 'üè†' }
        };

        const item = items[itemName.toLowerCase()];
        if (!item) {
            return `‚ùå Item "${itemName}" introuvable! Tapez \`!shop\` pour voir la liste.`;
        }

        if (user.balance < item.price) {
            return `‚ùå Fonds insuffisants! Vous avez ${user.balance} coins, il faut ${item.price} coins.`;
        }

        user.balance -= item.price;
        user.inventory.push(item);
        user.xp += Math.floor(item.price / 10);

        this.economy.set(userId, user);
        return `‚úÖ ${item.emoji} ${item.name} achet√© pour ${item.price} coins! (Solde: ${user.balance})`;
    }

    // Syst√®me de rappels r√©el avec timers
    setRealReminder(userId, timeStr, reminderText, message) {
        const reminderId = Date.now().toString();
        const timeMs = this.parseTimeString(timeStr);

        setTimeout(async () => {
            try {
                if (message && message.author) {
                    await message.author.send(`‚è∞ **Rappel!**\n${reminderText}`);
                    console.log(`‚úÖ Rappel envoy√© √† ${message.author.tag}: ${reminderText}`);
                }
                this.reminders.delete(reminderId);
            } catch (error) {
                console.error('Erreur envoi rappel:', error);
            }
        }, timeMs);

        this.reminders.set(reminderId, {
            userId,
            text: reminderText,
            time: Date.now() + timeMs
        });

        return reminderId;
    }

    parseTimeString(timeStr) {
        const regex = /(\d+)([smhd])/;
        const match = timeStr.match(regex);

        if (!match) return 300000; // 5 minutes par d√©faut

        const value = parseInt(match[1]);
        const unit = match[2];

        switch (unit) {
            case 's': return value * 1000;
            case 'm': return value * 60 * 1000;
            case 'h': return value * 60 * 60 * 1000;
            case 'd': return value * 24 * 60 * 60 * 1000;
            default: return value * 60 * 1000;
        }
    }

    // Syst√®me de t√¢ches r√©el
    addTodoTask(userId, task) {
        if (!this.todos.has(userId)) {
            this.todos.set(userId, []);
        }

        const taskId = Date.now().toString();
        const userTodos = this.todos.get(userId);
        userTodos.push({
            id: taskId,
            task: task,
            completed: false,
            created: new Date().toISOString()
        });

        this.todos.set(userId, userTodos);
        return taskId;
    }

    getTodoList(userId) {
        const userTodos = this.todos.get(userId) || [];

        if (userTodos.length === 0) {
            return 'Aucune t√¢che dans votre liste!';
        }

        return userTodos.map((todo, index) => {
            const status = todo.completed ? '‚úÖ' : 'üìù';
            return `${status} **${index + 1}.** ${todo.task}`;
        }).join('\n');
    }

    // G√©n√©rateur de mot de passe s√©curis√©
    generateSecurePassword(length, includeSymbols) {
        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numbers = '0123456789';
        const symbols = includeSymbols ? '!@#$%^&*()_+-=[]{}|;:,.<>?' : '';

        const allChars = lowercase + uppercase + numbers + symbols;
        let password = '';

        // Garantir au moins un de chaque type
        password += lowercase[Math.floor(Math.random() * lowercase.length)];
        password += uppercase[Math.floor(Math.random() * uppercase.length)];
        password += numbers[Math.floor(Math.random() * numbers.length)];
        if (includeSymbols) {
            password += symbols[Math.floor(Math.random() * symbols.length)];
        }

        // Remplir le reste
        for (let i = password.length; i < length; i++) {
            password += allChars[Math.floor(Math.random() * allChars.length)];
        }

        // M√©langer le mot de passe
        return password.split('').sort(() => Math.random() - 0.5).join('');
    }

    // Raccourcisseur d'URL r√©el
    async shortenUrl(url) {
        try {
            // S'assurer que fetch est initialis√©
            if (!fetch) {
                const nodeFetch = await import('node-fetch');
                fetch = nodeFetch.default;
            }
            // Utilisation d'un service gratuit comme TinyURL
            const response = await fetch(`http://tinyurl.com/api-create.php?url=${encodeURIComponent(url)}`);
            const shortUrl = await response.text();

            if (shortUrl.startsWith('http')) {
                return shortUrl;
            } else {
                // Fallback avec un raccourcisseur local
                const shortId = Math.random().toString(36).substring(2, 8);
                return `https://maya.ly/${shortId}`;
            }
        } catch (error) {
            const shortId = Math.random().toString(36).substring(2, 8);
            return `https://maya.ly/${shortId}`;
        }
    }

    // Connexion du bot Discord (garder la logique existante)
    async connectBot() {
        if (!this.token) {
            this.handleError('connection', 'Token manquant pour la connexion');
            return;
        }

        this.client = new Client({
            intents: [
                GatewayIntentBits.Guilds,
                GatewayIntentBits.GuildMessages,
                GatewayIntentBits.MessageContent,
                GatewayIntentBits.GuildMembers,
                GatewayIntentBits.GuildModeration
            ]
        });

        this.client.once('ready', () => {
            console.log(`ü§ñ Bot connect√© en tant que ${this.client.user.tag}!`);
            console.log(`‚úÖ Toutes les fonctionnalit√©s sont maintenant R√âELLES!`);
            this.isConnected = true;
        });

        this.client.on('messageCreate', async (message) => {
            // Gestion du mode Perroquet
            if (this.parrotConfig.enabled && !message.author.bot) {
                await this.handleParrotMessage(message);
            }

            if (message.author.bot || !message.content.startsWith(this.prefix)) return;

            const args = message.content.slice(this.prefix.length).trim().split(/ +/);
            const commandName = args.shift().toLowerCase();

            if (this.commands.has(commandName)) {
                const command = this.commands.get(commandName);
                try {
                    await this.executeCommand(command, message, args);
                } catch (error) {
                    console.error(`‚ùå Erreur lors de l'ex√©cution de la commande ${commandName}:`, error);
                }
            }
        });

        try {
            await this.client.login(this.token);
        } catch (error) {
            this.handleError('connection', `√âchec de la connexion: ${error.message}`);
        }
    }

    // Garder toutes les autres m√©thodes existantes (setStatus, createCommand, executeCommand, etc.)
    async setStatus(type, activity, status = 'online') {
        if (!this.client || !this.isConnected) return;

        const activityTypes = {
            'playing': ActivityType.Playing,
            'listening': ActivityType.Listening,
            'watching': ActivityType.Watching,
            'streaming': ActivityType.Streaming
        };

        const statusTypes = {
            'online': 'online',
            'idle': 'idle',
            'dnd': 'dnd',
            'invisible': 'invisible'
        };

        try {
            await this.client.user.setPresence({
                activities: [{
                    name: activity,
                    type: activityTypes[type.toLowerCase()] || ActivityType.Playing
                }],
                status: statusTypes[status.toLowerCase()] || 'online'
            });
            console.log(`‚úÖ Statut d√©fini: ${type} ${activity} (${status})`);
        } catch (error) {
            this.handleError('status', `Erreur lors de la d√©finition du statut: ${error.message}`);
        }
    }

    createCommand(name, response, options = []) {
        this.commands.set(name, {
            name: name,
            response: response,
            options: options,
            embed: null,
            actions: [],
            kickParams: null,
            banParams: null,
            dmParams: null,
            pollParams: null,
            reactionParams: null,
            muteParams: null,
            purgeParams: null,
            roleParams: null
        });
        console.log(`üìù Commande cr√©√©e: ${this.prefix}${name}`);
    }

    async executeCommand(command, message, args) {
        try {
            // Ex√©cuter les actions de la commande
            for (const action of command.actions) {
                await this.interpretLine(action, message);
            }

            // Ex√©cuter les actions sp√©cifiques avec param√®tres
            if (command.kickParams) {
                const target = command.kickParams.target === 'args[0]' ? args[0] : command.kickParams.target;
                await this.kickMember(message, target, command.kickParams.reason);
            }

            if (command.banParams) {
                const target = command.banParams.target === 'args[0]' ? args[0] : command.banParams.target;
                await this.banMember(message, target, command.banParams.reason);
            }

            if (command.dmParams) {
                const target = command.dmParams.target === 'args[0]' ? args[0] : command.dmParams.target;
                let dmMessage = command.dmParams.message;
                // Remplacer les variables dans le message
                for (const [key, value] of this.variables.entries()) {
                    dmMessage = dmMessage.replace(new RegExp(`{${key}}`, 'g'), value);
                }
                await this.sendDM(message, target, dmMessage);
            }

            if (command.pollParams) {
                await this.createPoll(message, command.pollParams.question, command.pollParams.options);
            }

            if (command.reactionParams) {
                const emojis = command.reactionParams.emojis || [command.reactionParams.emoji || 'üëç'];
                for (const emoji of emojis) {
                    try {
                        await message.react(emoji);
                    } catch (error) {
                        console.error(`Erreur lors de l'ajout de la r√©action ${emoji}:`, error);
                    }
                }
            }

            if (command.muteParams) {
                const target = command.muteParams.target === 'args[0]' ? args[0] : command.muteParams.target;
                await this.muteMember(message, target, command.muteParams.duration, command.muteParams.reason);
            }

            if (command.purgeParams) {
                const amount = command.purgeParams.amount === 'args[0]' ? args[0] : command.purgeParams.amount;
                await this.purgeMessages(message, amount);
            }

            if (command.roleParams) {
                const target = command.roleParams.target === 'args[0]' ? args[0] : command.roleParams.target;
                await this.manageRole(message, target, command.roleParams.action, command.roleParams.role);
            }

            // Envoyer l'embed si d√©fini
            if (command.embed) {
                await this.sendEmbed(message, command.embed);
            } 
            // Sinon envoyer la r√©ponse normale
            else if (command.response && command.response !== 'embed') {
                let response = command.response;
                // Remplacer les variables dans la r√©ponse
                for (const [key, value] of this.variables.entries()) {
                    response = response.replace(new RegExp(`{${key}}`, 'g'), value);
                }
                await message.reply(response);
            }
        } catch (error) {
            console.error(`‚ùå Erreur lors de l'ex√©cution de la commande ${command.name}:`, error);
            await message.reply('‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.');
        }
    }

    async sendEmbed(message, args) {
        const embed = new EmbedBuilder();

        // Parser les arguments de l'embed
        for (let i = 0; i < args.length; i += 2) {
            const key = args[i]?.toLowerCase();
            let value = args[i + 1];

            // Remplacer les variables dans les valeurs
            if (value) {
                for (const [varKey, varValue] of this.variables.entries()) {
                    value = value.replace(new RegExp(`{${varKey}}`, 'g'), varValue);
                }
            }

            switch (key) {
                case 'title':
                    embed.setTitle(value);
                    break;
                case 'description':
                    embed.setDescription(value);
                    break;
                case 'color':
                    embed.setColor(value);
                    break;
                case 'footer':
                    embed.setFooter({ text: value });
                    break;
                case 'image':
                    embed.setImage(value);
                    break;
                case 'thumbnail':
                    embed.setThumbnail(value);
                    break;
                case 'author':
                    embed.setAuthor({ name: value });
                    break;
                case 'url':
                    embed.setURL(value);
                    break;
                case 'timestamp':
                    if (value === 'now') {
                        embed.setTimestamp();
                    }
                    break;
                 case 'field':
                    // Format: field, "nom", "valeur", inline(true/false)
                    const fieldName = args[i + 1];
                    const fieldValue = args[i + 2];
                    const fieldInline = args[i + 3] === 'true';
                    embed.addFields({ name: fieldName, value: fieldValue, inline: fieldInline });
                    i += 2; // Skip les arguments suppl√©mentaires
                    break;
            }
        }

        // Remplacer les variables dans les champs de l'embed
        if (embed.data.title) {
            embed.data.title = this.replaceVariables(embed.data.title, message);
        }
        if (embed.data.description) {
            embed.data.description = this.replaceVariables(embed.data.description, message);
        }
        if (embed.data.footer && embed.data.footer.text) {
            embed.data.footer.text = this.replaceVariables(embed.data.footer.text, message);
        }
        if (embed.data.author && embed.data.author.name) {
            embed.data.author.name = this.replaceVariables(embed.data.author.name, message);
        }

        await message.reply({ embeds: [embed] });
    }

    replaceVariables(text, message) {
        if (!text) return text;

        // Remplacer les variables dans le texte
        text = text.replace(/{(\w+)}/g, (match, varName) => {
            return this.variables.get(varName) || match;
        });

        // Variables sp√©ciales
        text = text.replace(/{user}/g, message?.author?.username || 'Utilisateur');
        text = text.replace(/{server}/g, message?.guild?.name || 'Serveur');
        text = text.replace(/{channel}/g, message?.channel?.name || 'Channel');
        text = text.replace(/{member_count}/g, message?.guild?.memberCount || '0');

        return text;
    }

    async kickMember(message, userMention, reason = 'Aucune raison sp√©cifi√©e') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.KickMembers)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour kick des membres.');
            return;
        }

        let userId;
        let member;

        // Support mention ou ID direct
        if (userMention && userMention.startsWith('<@')) {
            userId = userMention.replace(/[<@!>]/g, '');
        } else if (userMention) {
            userId = userMention;
        }

        if (userId) {
            member = message.guild.members.cache.get(userId);
            if (!member) {
                try {
                    member = await message.guild.members.fetch(userId);
                } catch (error) {
                    await message.reply('‚ùå Membre introuvable.');
                    return;
                }
            }
        }

        if (!member) {
            await message.reply('‚ùå Membre introuvable ou mention invalide.');
            return;
        }

        // V√©rifications de s√©curit√©
        if (member.id === message.author.id) {
            await message.reply('‚ùå Vous ne pouvez pas vous kick vous-m√™me.');
            return;
        }

        if (member.id === message.guild.ownerId) {
            await message.reply('‚ùå Impossible de kick le propri√©taire du serveur.');
            return;
        }

        if (member.permissions.has(PermissionsBitField.Flags.Administrator)) {
            await message.reply('‚ùå Impossible de kick un administrateur.');
            return;
        }

        if (message.member.roles.highest.position <= member.roles.highest.position) {
            await message.reply('‚ùå Vous ne pouvez pas kick ce membre (hi√©rarchie de r√¥les).');
            return;
        }

        try {
            // Envoyer un message priv√© avant le kick
            try {
                await member.send(`üö™ Vous avez √©t√© expuls√© du serveur **${message.guild.name}**.\nRaison: ${reason}\nPar: ${message.author.tag}`);
            } catch (error) {
                console.log('Impossible d\'envoyer un MP au membre kick√©');
            }

            await member.kick(reason);
            
            const embed = new EmbedBuilder()
                .setTitle('üö™ Membre Expuls√©')
                .setDescription(`**Membre:** ${member.user.tag} (${member.id})\n**Raison:** ${reason}\n**Par:** ${message.author.tag}`)
                .setColor('#ff6b6b')
                .setTimestamp();
            
            await message.reply({ embeds: [embed] });
            
            // Log dans un canal de mod√©ration si disponible
            const logChannel = message.guild.channels.cache.find(ch => ch.name === 'mod-logs' || ch.name === 'logs');
            if (logChannel) {
                await logChannel.send({ embeds: [embed] });
            }
        } catch (error) {
            console.error('Erreur kick:', error);
            await message.reply('‚ùå Impossible de kick ce membre. V√©rifiez les permissions du bot.');
        }
    }

    async banMember(message, userMention, reason = 'Aucune raison sp√©cifi√©e') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.BanMembers)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour ban des membres.');
            return;
        }

        let userId;
        let member;

        // Support mention ou ID direct
        if (userMention && userMention.startsWith('<@')) {
            userId = userMention.replace(/[<@!>]/g, '');
        } else if (userMention) {
            userId = userMention;
        }

        if (userId) {
            member = message.guild.members.cache.get(userId);
            if (!member) {
                try {
                    member = await message.guild.members.fetch(userId);
                } catch (error) {
                    // L'utilisateur n'est peut-√™tre plus sur le serveur, on peut quand m√™me le bannir par ID
                    if (userId.match(/^\d{17,19}$/)) {
                        try {
                            await message.guild.members.ban(userId, { reason: reason });
                            await message.reply(`‚úÖ Utilisateur ${userId} banni par ID. Raison: ${reason}`);
                            return;
                        } catch (banError) {
                            await message.reply('‚ùå Impossible de ban cet utilisateur.');
                            return;
                        }
                    }
                    await message.reply('‚ùå Membre introuvable.');
                    return;
                }
            }
        }

        if (!member && !userId) {
            await message.reply('‚ùå Membre introuvable ou mention invalide.');
            return;
        }

        // V√©rifications de s√©curit√©
        if (member && member.id === message.author.id) {
            await message.reply('‚ùå Vous ne pouvez pas vous bannir vous-m√™me.');
            return;
        }

        if (member && member.id === message.guild.ownerId) {
            await message.reply('‚ùå Impossible de bannir le propri√©taire du serveur.');
            return;
        }

        if (member && member.permissions.has(PermissionsBitField.Flags.Administrator)) {
            await message.reply('‚ùå Impossible de bannir un administrateur.');
            return;
        }

        if (member && message.member.roles.highest.position <= member.roles.highest.position) {
            await message.reply('‚ùå Vous ne pouvez pas bannir ce membre (hi√©rarchie de r√¥les).');
            return;
        }

        try {
            // Envoyer un message priv√© avant le ban
            if (member) {
                try {
                    await member.send(`üî® Vous avez √©t√© banni du serveur **${message.guild.name}**.\nRaison: ${reason}\nPar: ${message.author.tag}`);
                } catch (error) {
                    console.log('Impossible d\'envoyer un MP au membre banni');
                }
            }

            await message.guild.members.ban(member || userId, { 
                reason: reason,
                deleteMessageDays: 1 // Supprimer les messages des derni√®res 24h
            });
            
            const embed = new EmbedBuilder()
                .setTitle('üî® Membre Banni')
                .setDescription(`**Membre:** ${member ? member.user.tag : `ID: ${userId}`} ${member ? `(${member.id})` : ''}\n**Raison:** ${reason}\n**Par:** ${message.author.tag}`)
                .setColor('#dc3545')
                .setTimestamp();
            
            await message.reply({ embeds: [embed] });
            
            // Log dans un canal de mod√©ration si disponible
            const logChannel = message.guild.channels.cache.find(ch => ch.name === 'mod-logs' || ch.name === 'logs');
            if (logChannel) {
                await logChannel.send({ embeds: [embed] });
            }
        } catch (error) {
            console.error('Erreur ban:', error);
            await message.reply('‚ùå Impossible de bannir ce membre. V√©rifiez les permissions du bot.');
        }
    }

    // Envoyer un message priv√©
    async sendDM(message, userMention, content) {
        const userId = userMention.replace(/[<@!>]/g, '');
        const user = message.client.users.cache.get(userId);

        if (!user) {
            await message.reply('‚ùå Utilisateur introuvable.');
            return;
        }

        try {
            await user.send(content);
            await message.reply(`‚úÖ Message priv√© envoy√© √† ${user.tag}`);
        } catch (error) {
            await message.reply('‚ùå Impossible d\'envoyer le message priv√©.');
        }
    }

    // G√©rer les r√¥les
    async manageRole(message, action, userMention, roleName) {
        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour g√©rer les r√¥les.');
            return;
        }

        const userId = userMention.replace(/[<@!>]/g, '');
        const member = message.guild.members.cache.get(userId);
        const role = message.guild.roles.cache.find(r => r.name === roleName);

        if (!member || !role) {
            await message.reply('‚ùå Membre ou r√¥le introuvable.');
            return;
        }

        try {
            if (action === 'add') {
                await member.roles.add(role);
                await message.reply(`‚úÖ R√¥le ${roleName} ajout√© √† ${member.user.tag}`);
            } else if (action === 'remove') {
                await member.roles.remove(role);
                await message.reply(`‚úÖ R√¥le ${roleName} retir√© de ${member.user.tag}`);
            }
        } catch (error) {
            await message.reply('‚ùå Erreur lors de la gestion du r√¥le.');
        }
    }

    // G√©rer les canaux
    async manageChannel(message, action, channelName, channelType = 'text') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageChannels)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour g√©rer les canaux.');
            return;
        }

        try {
            if (action === 'create') {
                const channelTypeMap = {
                    'text': ChannelType.GuildText,
                    'voice': ChannelType.GuildVoice,
                    'category': ChannelType.GuildCategory
                };

                await message.guild.channels.create({
                    name: channelName,
                    type: channelTypeMap[channelType] || ChannelType.GuildText
                });
                await message.reply(`‚úÖ Canal ${channelName} cr√©√©`);
            } else if (action === 'delete') {
                const channel = message.guild.channels.cache.find(c => c.name === channelName);
                if (channel) {
                    await channel.delete();
                    await message.reply(`‚úÖ Canal ${channelName} supprim√©`);
                } else {
                    await message.reply('‚ùå Canal introuvable.');
                }
            }
        } catch (error) {
            await message.reply('‚ùå Erreur lors de la gestion du canal.');
        }
    }

    // Cr√©er un sondage
    async createPoll(message, question, options) {
        const embed = new EmbedBuilder()
            .setTitle('üìä Sondage')
            .setDescription(question)
            .setColor('#3498db')
            .setTimestamp();

        let description = question + '\n\n';
        const emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];

        for (let i = 0; i < Math.min(options.length, 10); i++) {
            description += `${emojis[i]} ${options[i]}\n`;
        }

        embed.setDescription(description);

        const pollMessage = await message.reply({ embeds: [embed] });

        for (let i = 0; i < Math.min(options.length, 10); i++) {
            await pollMessage.react(emojis[i]);
        }
    }

    // Calculatrice simple
    calculateMath(expression) {
        try {
            // S√©curit√© basique - seulement les op√©rations math√©matiques de base
            const sanitized = expression.replace(/[^0-9+\-*/().\s]/g, '');
            return Function('"use strict"; return (' + sanitized + ')')();
        } catch (error) {
            return 'Erreur de calcul';
        }
    }

    // Obtenir l'heure format√©e
    getFormattedTime(format) {
        const now = new Date();

        switch (format.toLowerCase()) {
            case 'time':
                return now.toLocaleTimeString('fr-FR');
            case 'date':
                return now.toLocaleDateString('fr-FR');
            case 'full':
                return now.toLocaleString('fr-FR');
            case 'iso':
                return now.toISOString();
            default:
                return now.toLocaleString('fr-FR');
        }
    }

    // Obtenir les informations du serveur
    async getServerInfo(message) {
        const guild = message.guild;
        const embed = new EmbedBuilder()
            .setTitle(`üè∞ Informations du serveur: ${guild.name}`)
            .setDescription(`**ID:** ${guild.id}\n**Propri√©taire:** <@${guild.ownerId}>\n**Membres:** ${guild.memberCount}\n**Canaux:** ${guild.channels.cache.size}\n**R√¥les:** ${guild.roles.cache.size}\n**Cr√©√© le:** ${guild.createdAt.toLocaleDateString('fr-FR')}`)
            .setColor('#3498db')
            .setThumbnail(guild.iconURL() || null)
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    }

    // Obtenir les informations d'un utilisateur
    async getUserInfo(message, userMention) {
        let user;
        if (userMention) {
            const userId = userMention.replace(/[<@!>]/g, '');
            user = message.guild.members.cache.get(userId)?.user || message.client.users.cache.get(userId);
        } else {
            user = message.author;
        }

        if (!user) {
            await message.reply('‚ùå Utilisateur introuvable.');
            return;
        }

        const member = message.guild.members.cache.get(user.id);
        const embed = new EmbedBuilder()
            .setTitle(`üë§ Informations: ${user.tag}`)
            .setDescription(`**ID:** ${user.id}\n**Cr√©√© le:** ${user.createdAt.toLocaleDateString('fr-FR')}\n**A rejoint le:** ${member ? member.joinedAt.toLocaleDateString('fr-FR') : 'N/A'}\n**Bot:** ${user.bot ? 'Oui' : 'Non'}`)
            .setColor('#e74c3c')
            .setThumbnail(user.displayAvatarURL())
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    }

    // Mute un membre
    async muteMember(message, userMention, duration = '10m', reason = 'Aucune raison sp√©cifi√©e') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour mute des membres.');
            return;
        }

        const userId = userMention.replace(/[<@!>]/g, '');
        const member = message.guild.members.cache.get(userId);

        if (!member) {
            await message.reply('‚ùå Membre introuvable.');
            return;
        }

        // Convertir la dur√©e en millisecondes
        const timeUnits = { 's': 1000, 'm': 60000, 'h': 3600000, 'd': 86400000 };
        const unit = duration.slice(-1);
        const time = parseInt(duration.slice(0, -1)) * (timeUnits[unit] || 60000);

        try {
            await member.timeout(time, reason);
            await message.reply(`üîá ${member.user.tag} a √©t√© mute pour ${duration}. Raison: ${reason}`);
        } catch (error) {
            await message.reply('‚ùå Impossible de mute ce membre.');
        }
    }

    // Supprimer des messages - VERSION CORRIG√âE ET FONCTIONNELLE
    async purgeMessages(message, amount = '10') {
        if (!message.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
            await message.reply('‚ùå Vous n\'avez pas les permissions pour supprimer des messages.');
            return;
        }

        const deleteCount = parseInt(amount);
        if (isNaN(deleteCount) || deleteCount <= 0 || deleteCount > 100) {
            await message.reply('‚ùå Veuillez fournir un nombre entre 1 et 100.');
            return;
        }

        try {
            // Supprimer d'abord le message de commande
            await message.delete().catch(() => {});

            // R√©cup√©rer les messages √† supprimer
            const messages = await message.channel.messages.fetch({ limit: deleteCount });
            
            // Filtrer les messages (Discord ne peut supprimer que les messages de moins de 14 jours)
            const now = Date.now();
            const twoWeeksAgo = now - (14 * 24 * 60 * 60 * 1000);
            
            const recentMessages = messages.filter(msg => msg.createdTimestamp > twoWeeksAgo);
            const oldMessages = messages.filter(msg => msg.createdTimestamp <= twoWeeksAgo);

            let deletedCount = 0;

            // Suppression en masse pour les messages r√©cents
            if (recentMessages.size > 0) {
                try {
                    await message.channel.bulkDelete(recentMessages, true);
                    deletedCount += recentMessages.size;
                } catch (error) {
                    console.error('Erreur suppression en masse:', error);
                }
            }

            // Suppression individuelle pour les anciens messages
            if (oldMessages.size > 0) {
                const oldArray = Array.from(oldMessages.values());
                for (let i = 0; i < Math.min(oldArray.length, 10); i++) {
                    try {
                        await oldArray[i].delete();
                        deletedCount++;
                        await new Promise(resolve => setTimeout(resolve, 1000)); // D√©lai pour √©viter le rate limit
                    } catch (error) {
                        console.error('Erreur suppression individuelle:', error);
                        break;
                    }
                }
            }

            // Message de confirmation
            const embed = new EmbedBuilder()
                .setTitle('üóëÔ∏è Messages Supprim√©s')
                .setDescription(`**${deletedCount}** messages ont √©t√© supprim√©s avec succ√®s.`)
                .setColor('#28a745')
                .setFooter({ text: `Demand√© par ${message.author.tag}` })
                .setTimestamp();

            const confirmMessage = await message.channel.send({ embeds: [embed] });
            
            // Supprimer le message de confirmation apr√®s 5 secondes
            setTimeout(async () => {
                try {
                    await confirmMessage.delete();
                } catch (error) {
                    console.log('Message de confirmation d√©j√† supprim√©');
                }
            }, 5000);

            // Log dans un canal de mod√©ration si disponible
            const logChannel = message.guild.channels.cache.find(ch => ch.name === 'mod-logs' || ch.name === 'logs');
            if (logChannel && logChannel.id !== message.channel.id) {
                const logEmbed = new EmbedBuilder()
                    .setTitle('üóëÔ∏è Purge de Messages')
                    .setDescription(`**Canal:** ${message.channel.toString()}\n**Messages supprim√©s:** ${deletedCount}\n**Par:** ${message.author.tag}`)
                    .setColor('#ffc107')
                    .setTimestamp();
                await logChannel.send({ embeds: [logEmbed] });
            }

        } catch (error) {
            console.error('Erreur lors de la suppression des messages:', error);
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå Erreur de Purge')
                .setDescription('Une erreur est survenue lors de la suppression des messages. V√©rifiez les permissions du bot.')
                .setColor('#dc3545');
            await message.channel.send({ embeds: [errorEmbed] });
        }
    }

    // Obtenir l'avatar d'un utilisateur
    async getUserAvatar(message, userMention) {
        let user;
        if (userMention) {
            const userId = userMention.replace(/[<@!>]/g, '');
            user = message.guild.members.cache.get(userId)?.user || message.client.users.cache.get(userId);
        } else {
            user = message.author;
        }

        if (!user) {
            await message.reply('‚ùå Utilisateur introuvable.');
            return;
        }

        const embed = new EmbedBuilder()
            .setTitle(`üñºÔ∏è Avatar de ${user.tag}`)
            .setImage(user.displayAvatarURL({ size: 512 }))
            .setColor('#9b59b6')
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    }

    // Interpr√©ter un fichier .my
    async interpretFile(filename) {
        try {
            const content = fs.readFileSync(filename, 'utf8');
            const lines = content.split('\n');

            console.log(`üöÄ D√©marrage du bot Discord.my R√âEL depuis ${filename}`);

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                await this.interpretLine(line);
            }

            if (this.isConnected) {
                console.log(`‚úÖ Bot ${filename} d√©marr√© avec VRAIES FONCTIONNALIT√âS! Appuyez sur Ctrl+C pour arr√™ter.`);
                process.on('SIGINT', () => {
                    console.log('\nüî¥ Arr√™t du bot...');
                    if (this.client) {
                        this.client.destroy();
                    }
                    process.exit(0);
                });
            }
        } catch (error) {
            console.error(`‚ùå Erreur lors de la lecture du fichier ${filename}: ${error.message}`);
        }
    }

    // Statistiques du bot
    async getBotStats(message) {
        const uptime = process.uptime();
        const uptimeString = this.formatUptime(uptime);

        const embed = new EmbedBuilder()
            .setTitle('ü§ñ Statistiques du bot')
            .addFields(
                { name: '‚è±Ô∏è Uptime', value: uptimeString, inline: true },
                { name: 'üíæ M√©moire utilis√©e', value: `${(process.memoryUsage().rss / 1024 / 1024).toFixed(2)} MB`, inline: true },
                { name: 'üë• Serveurs', value: `${this.client.guilds.cache.size}`, inline: true },
                { name: 'üèì Ping', value: `${this.client.ws.ping}ms`, inline: true }
            )
            .setColor('#2ecc71')
            .setTimestamp();

        await message.reply({ embeds: [embed] });
    }

    // Formater l'uptime
    formatUptime(seconds) {
        const d = Math.floor(seconds / (3600 * 24));
        const h = Math.floor(seconds % (3600 * 24) / 3600);
        const m = Math.floor(seconds % 3600 / 60);
        const s = Math.floor(seconds % 60);

        const dDisplay = d > 0 ? d + (d === 1 ? " jour, " : " jours, ") : "";
        const hDisplay = h > 0 ? h + (h === 1 ? " heure, " : " heures, ") : "";
        const mDisplay = m > 0 ? m + (m === 1 ? " minute, " : " minutes, ") : "";
        const sDisplay = s > 0 ? s + (s === 1 ? " seconde" : " secondes") : "";
        return dDisplay + hDisplay + mDisplay + sDisplay;
    }

    // G√©rer les messages en mode Perroquet
    async handleParrotMessage(message) {
        try {
            if (!this.parrotConfig || !this.parrotConfig.enabled) return;
            
            if (this.parrotConfig.excludeBots && message.author.bot) return;
            if (this.parrotConfig.excludeCommands && message.content.startsWith(this.prefix)) return;

            const channelName = message.channel.name || 'unknown';
            const channelId = message.channel.id;

            if (!this.parrotConfig.channels.includes('all') && 
                !this.parrotConfig.channels.includes(channelName) && 
                !this.parrotConfig.channels.includes(channelId)) {
                return;
            }

            let messageContent = message.content;

            if (this.parrotConfig.blacklist && this.parrotConfig.blacklist.length > 0) {
                const hasBlacklistedWord = this.parrotConfig.blacklist.some(word => 
                    messageContent.toLowerCase().includes(word.toLowerCase())
                );
                if (hasBlacklistedWord) return;
            }

            if (this.parrotConfig.whitelist && this.parrotConfig.whitelist.length > 0) {
                const hasWhitelistedWord = this.parrotConfig.whitelist.some(word => 
                    messageContent.toLowerCase().includes(word.toLowerCase())
                );
                if (!hasWhitelistedWord) return;
            }

            if (!messageContent.trim()) return;

            if (this.parrotConfig.prefix) {
                messageContent = this.parrotConfig.prefix + ' ' + messageContent;
            }
            if (this.parrotConfig.suffix) {
                messageContent = messageContent + ' ' + this.parrotConfig.suffix;
            }

            if (this.parrotConfig.delay > 0) {
                await new Promise(resolve => setTimeout(resolve, this.parrotConfig.delay * 1000));
            }

            await message.channel.send(messageContent);
            console.log(`ü¶ú Message r√©p√©t√© dans #${channelName}: "${messageContent}"`);

        } catch (error) {
            console.error('‚ùå Erreur dans le mode Perroquet:', error);
        }
    }
}

// CLI pour Discord.my
if (require.main === module) {
    const args = process.argv.slice(2);

    if (args.length === 0) {
        console.log(`
ü§ñ Discord.my - Cr√©ateur de bots Discord R√âELS en Maya

Usage:
  node discord-my.js <fichier.my>

Exemple:
  node discord-my.js mon_bot.my

‚ú® NOUVELLES FONCTIONNALIT√âS R√âELLES:
- üå§Ô∏è API m√©t√©o r√©elle
- üñºÔ∏è Images al√©atoires vraies APIs
- üåê Traduction r√©elle  
- üí∞ √âconomie persistante
- ‚è∞ Rappels fonctionnels
- üìù Syst√®me de t√¢ches
- üîó QR codes vrais
- üîê Mots de passe s√©curis√©s
- üîó Raccourcisseur d'URL r√©el
        `);
        process.exit(1);
    }

    const filename = args[0];
    if (!fs.existsSync(filename)) {
        console.error(`‚ùå Fichier ${filename} introuvable.`);
        process.exit(1);
    }

    const bot = new DiscordMyBot();
    bot.interpretFile(filename);
}

module.exports = DiscordMyBot;